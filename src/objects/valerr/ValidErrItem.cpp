/* $Id: ValidErrItem.cpp 388066 2013-02-05 02:24:48Z kans $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Author:  .......
 *
 * File Description:
 *   .......
 *
 * Remark:
 *   This code was originally generated by application DATATOOL
 *   using the following specifications:
 *   'valerr.asn'.
 */

// standard includes
#include <ncbi_pch.hpp>

// generated includes
#include <objects/valerr/ValidErrItem.hpp>
#include <util/static_map.hpp>

// generated classes

BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


typedef SStaticPair<const char*, const char*> TErrStrs;
typedef SStaticPair<unsigned int, TErrStrs> TErrTypStrs;

const TErrTypStrs sc_ErrStrs [] = {
    { eErr_ALL,
    {  "ALL", "ALL" } },
    { eErr_UNKNOWN,
    {  "UNKNOWN", "UNKNOWN" } },

/* SEQ_INST */

   { eErr_SEQ_INST_ExtNotAllowed,
   { "ExtNotAllowed",
"A Bioseq \"extension\" is used for special classes of Bioseq. This class of \
Bioseq should not have one but it does. This is probably a software error." } },
   { eErr_SEQ_INST_ExtBadOrMissing,
   { "ExtBadOrMissing",
"This class of Bioseq requires an \"extension\" but it is missing or of the \
wrong type. This is probably a software error." } },
   { eErr_SEQ_INST_SeqDataNotFound,
   { "SeqDataNotFound",
"No actual sequence data was found on this Bioseq. This is probably a \
software problem." } },
   { eErr_SEQ_INST_SeqDataNotAllowed,
   { "SeqDataNotAllowed",
"The wrong type of sequence data was found on this Bioseq. This is probably a \
software problem." } },
   { eErr_SEQ_INST_ReprInvalid,
   { "ReprInvalid",
"This Bioseq has an invalid representation class. This is probably a software \
error." } },
   { eErr_SEQ_INST_CircularProtein,
   { "CircularProtein",
"This protein Bioseq is represented as circular. Circular topology is \
normally used only for certain DNA molecules, for example, plasmids." } },
   { eErr_SEQ_INST_DSProtein,
   { "DSProtein",
"This protein Bioseq has strandedness indicated. Strandedness is normally a \
property only of DNA sequences. Please unset the strandedness." } },
   { eErr_SEQ_INST_MolNotSet,
   { "MolNotSet",
"It is not clear whether this sequence is nucleic acid or protein. Please set \
the appropriate molecule type (Bioseq.mol)." } },
   { eErr_SEQ_INST_MolOther,
   { "MolOther",
"Most sequences are either nucleic acid or protein. However, the molecule \
type (Bioseq.mol) is set to \"other\". It should probably be set to nucleic \
acid or a protein." } },
   { eErr_SEQ_INST_FuzzyLen,
   { "FuzzyLen",
"This sequence is marked as having an uncertain length, but the length is \
known exactly." } },
   { eErr_SEQ_INST_InvalidLen,
   { "InvalidLen",
"The length indicated for this sequence is invalid. This is probably a \
software error." } },
   { eErr_SEQ_INST_InvalidAlphabet,
   { "InvalidAlphabet",
"This Bioseq has an invalid alphabet (e.g. protein codes on a nucleic acid or \
vice versa). This is probably a software error." } },
   { eErr_SEQ_INST_SeqDataLenWrong,
   { "SeqDataLenWrong",
"The length of this Bioseq does not agree with the length of the actual data. \
This is probably a software error." } },
   { eErr_SEQ_INST_SeqPortFail,
   { "SeqPortFail",
"Something is very wrong with this entry. The validator cannot open a SeqPort \
on the Bioseq. Further testing cannot be done." } },
   { eErr_SEQ_INST_InvalidResidue,
   { "InvalidResidue",
"Invalid residue codes were found in this Bioseq." } },
   { eErr_SEQ_INST_StopInProtein,
   { "StopInProtein",
"Stop codon symbols were found in this protein Bioseq." } },
   { eErr_SEQ_INST_PartialInconsistent,
   { "PartialInconsistent",
"This segmented sequence is described as complete or incomplete in several \
places, but these settings are inconsistent." } },
   { eErr_SEQ_INST_ShortSeq,
   { "ShortSeq",
"This Bioseq is unusually short (less than 4 amino acids or less than 11 \
nucleic acids). GenBank does not usually accept such short sequences." } },
   { eErr_SEQ_INST_NoIdOnBioseq,
   { "NoIdOnBioseq",
"No SeqIds were found on this Bioseq. This is probably a software error." } },
   { eErr_SEQ_INST_BadDeltaSeq,
   { "BadDeltaSeq",
"Delta sequences should only be HTGS-1 or HTGS-2." } },
   { eErr_SEQ_INST_LongHtgsSequence,
   { "LongHtgsSequence",
"HTGS-1 or HTGS-2 sequences must be < 350 KB in length." } },
   { eErr_SEQ_INST_LongLiteralSequence,
   { "LongLiteralSequence",
"Delta literals must be < 350 KB in length." } },
   { eErr_SEQ_INST_SequenceExceeds350kbp,
   { "SequenceExceeds350kbp",
"Individual sequences must be < 350 KB in length, unless they represent a single gene." } },
   { eErr_SEQ_INST_ConflictingIdsOnBioseq,
   { "ConflictingIdsOnBioseq",
"Two SeqIds of the same class was found on this Bioseq. This is probably a software error." } },
   { eErr_SEQ_INST_MolNuclAcid,
   { "MolNuclAcid",
"The specific type of this nucleic acid (DNA or RNA) is not set." } },
   { eErr_SEQ_INST_ConflictingBiomolTech,
   { "ConflictingBiomolTech",
"HTGS/STS/GSS records should be genomic DNA. There is a conflict between the \
technique and expected molecule type." } },
   { eErr_SEQ_INST_SeqIdNameHasSpace,
   { "SeqIdNameHasSpace",
"The Seq-id.name field should be a single word without any whitespace. This should be \
fixed by the database staff." } },
   { eErr_SEQ_INST_IdOnMultipleBioseqs,
   { "IdOnMultipleBioseqs",
"There are multiple occurrences of the same Seq-id in this record. Sequence \
identifiers must be unique within a record." } },
   { eErr_SEQ_INST_DuplicateSegmentReferences,
   { "DuplicateSegmentReferences",
"The segmented sequence refers multiple times to the same Seq-id. This may be due \
to a software error. Please consult with the database staff to fix this record." } },
   { eErr_SEQ_INST_TrailingX,
   { "TrailingX",
"The protein sequence ends with one or more X (unknown) amino acids." } },
   { eErr_SEQ_INST_BadSeqIdFormat,
   { "BadSeqIdFormat",
"A nucleotide sequence identifier should be 1 letter plus 5 digits or 2 letters \
plus 6 digits, and a protein sequence identifer should be 3 letters plus 5 digits." } },
   { eErr_SEQ_INST_PartsOutOfOrder,
   { "PartsOutOfOrder",
"The parts inside a segmented set should correspond to the seq_ext of the segmented \
bioseq.  A difference will affect how the flatfile is displayed." } },
   { eErr_SEQ_INST_BadSecondaryAccn,
   { "BadSecondaryAccn",
"A secondary accession usually indicates a record replaced or subsumed by the current \
record.  In this case, the current accession and secondary are the same." } },
   { eErr_SEQ_INST_ZeroGiNumber,
   { "ZeroGiNumber",
"GI numbers are assigned to sequences by NCBI's sequence tracking database.  0 is not \
a legal value for a gi number." } },
   { eErr_SEQ_INST_RnaDnaConflict,
   { "RnaDnaConflict",
"The MolInfo biomol field is inconsistent with the Bioseq molecule type field." } },
   { eErr_SEQ_INST_HistoryGiCollision,
   { "HistoryGiCollision",
"The Bioseq history gi refers to this Bioseq, not to its predecessor or successor." } },
   { eErr_SEQ_INST_GiWithoutAccession,
   { "GiWithoutAccession",
"The Bioseq has a gi identifier but no GenBank/EMBL/DDBJ accession identifier." } },
   { eErr_SEQ_INST_MultipleAccessions,
   { "MultipleAccessions",
"The Bioseq has a gi identifier and more than one GenBank/EMBL/DDBJ accession identifier." } },
   { eErr_SEQ_INST_HistAssemblyMissing,
   { "HistAssemblyMissing",
"The Bioseq has a TPA identifier but does not have a Seq-hist.assembly alignment.  This \
should be annotated or calculated by the database, resulting in a PRIMARY block visible \
in the flatfile." } },
   { eErr_SEQ_INST_TerminalNs,
   { "TerminalNs",
"The Bioseq has one or more N bases at the end." } },
   { eErr_SEQ_INST_UnexpectedIdentifierChange,
   { "UnexpectedIdentifierChange",
"The set of sequence identifiers on a Bioseq are not consistent with the previous version \
of the record in the database." } },
   { eErr_SEQ_INST_InternalNsInSeqLit,
   { "InternalNsInSeqLit",
"There are runs of many Ns inside the SeqLit component of a delta Bioseq." } },
   { eErr_SEQ_INST_SeqLitGapLength0,
   { "SeqLitGapLength0",
"A SeqLit component of a delta Bioseq can specify a gap, but it should not be a gap \
of 0 length." } },
   { eErr_SEQ_INST_TpaAssmeblyProblem,
   { "TpaAssmeblyProblem",
"Third party annotation records should have a TpaAssembly user object and a \
Seq-hist.assembly alignment for the PRIMARY block." } },
   { eErr_SEQ_INST_SeqLocLength,
   { "SeqLocLength",
"A SeqLoc component of a delta Bioseq is suspiciously small." } },
   { eErr_SEQ_INST_MissingGaps,
   { "MissingGaps",
"HTGS delta records should have gaps between each sequence segment." } },
   { eErr_SEQ_INST_CompleteTitleProblem,
   { "CompleteTitleProblem",
"The sequence title has complete genome in it, but it is not marked as complete." } },
   { eErr_SEQ_INST_CompleteCircleProblem,
   { "CompleteCircleProblem",
"This sequence has a circular topology, but it is not marked as complete." } },
   { eErr_SEQ_INST_BadHTGSeq,
   { "BadHTGSeq",
"High throughput genomic sequences without gaps should have quality score graphs." } },
   { eErr_SEQ_INST_GapInProtein,
   { "GapInProtein",
"Gap symbols found in this protein Bioseq." } },
   { eErr_SEQ_INST_BadProteinStart,
   { "BadProteinStart",
"A gap symbols was found at the start of this protein Bioseq." } },
   { eErr_SEQ_INST_TerminalGap,
   { "TerminalGap",
"The Bioseq has a gap at the end." } },
   { eErr_SEQ_INST_OverlappingDeltaRange,
   { "OverlappingDeltaRange",
"The Bioseq has a gap at the end." } },
   { eErr_SEQ_INST_LeadingX,
   { "LeadingX",
"The protein sequence starts with one or more X (unknown) amino acids." } },
   { eErr_SEQ_INST_InternalNsInSeqRaw,
   { "InternalNsInSeqRaw",
"There are runs of greater than 100 Ns within sequence.  Please describe \
what these Ns represent with your sequence submission." } },
   { eErr_SEQ_INST_InternalNsAdjacentToGap,
   { "InternalNsAdjacentToGap",
"There are Ns directly adjacent to a SeqLit gap in a delta Bioseq." } },
   { eErr_SEQ_INST_CaseDifferenceInSeqID,
   { "CaseDifferenceInSeqID",
"Multiple Bioseqs have the same Seq-id except for capitalization. Sequence \
identifiers must be unique in a case-insensitive manner within a record." } },
   { eErr_SEQ_INST_DeltaComponentIsGi0,
   { "DeltaComponentIsGi0",
"Delta component refers to gi 0. This indicates an error in database processing of this record." } },
   { eErr_SEQ_INST_FarFetchFailure,
   { "FarFetchFailure",
"Fetching of a far feature location or component bioseq was needed, but no fetch \
function is registered in the program." } },
   { eErr_SEQ_INST_InternalGapsInSeqRaw,
   { "InternalGapsInSeqRaw",
"Raw sequences should not have gap characters." } },
   { eErr_SEQ_INST_SelfReferentialSequence,
   { "SelfReferentialSequence",
"A delta sequence must refer to other components, not to itself." } },
   { eErr_SEQ_INST_WholeComponent,
   { "WholeComponent",
"A delta sequence component should be described as a specific interval, not as \
the whole of a sequence." } },
   { eErr_SEQ_INST_TSAHistAssemblyMissing,
   { "TSAHistAssemblyMissing",
"The Bioseq has a TSA MolInfo tech but does not have a Seq-hist.assembly alignment." } },
   { eErr_SEQ_INST_ProteinsHaveGeneralID,
   { "ProteinsHaveGeneralID",
"One or more protein Bioseqs have a general Seq-id." } },
   { eErr_SEQ_INST_HighNContent,
   { "HighNContent",
"This sequence contains too many Ns." } },
   { eErr_SEQ_INST_SeqLitDataLength0,
   { "SeqLitDataLength0",
"A SeqLit component of a delta Bioseq must not have 0 length." } },
   { eErr_SEQ_INST_DSmRNA,
   { "DSmRNA",
"This mRNA Bioseq is not single stranded." } },
   { eErr_SEQ_INST_HighNContentStretch,
   { "HighNContentStretch",
"This sequence contains long stretches of Ns." } },
   { eErr_SEQ_INST_HighNContentPercent,
   { "HighNContentPercent",
"This sequence contains a high percentage of Ns." } },
   { eErr_SEQ_INST_SeqLitGapFuzzNot100,
   { "SeqLitGapFuzzNot100",
"Gap of unknown length should have standard length of 100." } },
   { eErr_SEQ_INST_SeqGapProblem,
   { "SeqGapProblem",
"Inconsistent data in Seq-gap fields." } },

/* SEQ_DESCR */

   { eErr_SEQ_DESCR_BioSourceMissing,
   { "BioSourceMissing",
"The biological source of this sequence has not been described correctly.  A \
Bioseq must have a BioSource descriptor that covers the entire molecule. \
Additional BioSource features may also be added to recombinant molecules, \
natural or otherwise, to designate the parts of the molecule. Please add the \
source information." } },
   { eErr_SEQ_DESCR_InvalidForType,
   { "InvalidForType",
"This descriptor cannot be used with this Bioseq. A descriptor placed at the \
BioseqSet level applies to all of the Bioseqs in the set. Please make sure \
the descriptor is consistent with every sequence to which it applies." } },
   { eErr_SEQ_DESCR_FileOpenCollision,
   { "FileOpenCollision",
"FileOpen is unable to find a local file.  This is normal, and can be ignored." } },
   { eErr_SEQ_DESCR_Unknown,
   { "Unknown",
"An unknown or \"other\" modifier was used." } },
   { eErr_SEQ_DESCR_NoPubFound,
   { "NoPubFound",
"No publications were found in this entry which refer to this Bioseq. If a \
publication descriptor is added to a BioseqSet, it will apply to all of the \
Bioseqs in the set. A publication feature should be used if the publication \
applies only to a subregion of a sequence." } },
   { eErr_SEQ_DESCR_NoOrgFound,
   { "NoOrgFound",
"This entry does not specify the organism that was the source of the sequence. \
Please name the organism." } },
   { eErr_SEQ_DESCR_MultipleBioSources,
   { "MultipleBioSources",
"There are multiple BioSource or OrgRef descriptors in the same chain with \
the same taxonomic name. Their information should be combined into a single \
BioSource descriptor." } },
   { eErr_SEQ_DESCR_NoMolInfoFound,
   { "NoMolInfoFound",
"This sequence does not have a Mol-info descriptor applying to it.  This indicates \
genomic vs. message, sequencing technique, and whether the sequence is incomplete." } },
   { eErr_SEQ_DESCR_BadCountryCode,
   { "BadCountryCode",
"The country code (up to the first colon) is not on the approved list of countries." } },
   { eErr_SEQ_DESCR_NoTaxonID,
   { "NoTaxonID",
"The BioSource is missing a taxonID database identifier.  This will be inserted by \
the automated taxonomy lookup called by Clean Up Record." } },
   { eErr_SEQ_DESCR_InconsistentBioSources,
   { "InconsistentBioSources",
"This population study has BioSource descriptors with different taxonomic names. \
All members of a population study should be from the same organism." } },
   { eErr_SEQ_DESCR_MissingLineage,
   { "MissingLineage",
"A BioSource should have a taxonomic lineage, which can be obtained from the \
taxonomy network server." } },
   { eErr_SEQ_DESCR_SerialInComment,
   { "SerialInComment",
"Comments that refer to the conclusions of a specific reference should not be \
cited by a serial number inside brackets (e.g., [3]), but should instead be \
attached as a REMARK on the reference itself." } },
   { eErr_SEQ_DESCR_BioSourceNeedsFocus,
   { "BioSourceNeedsFocus",
"Focus must be set on a BioSource descriptor in records where there is a \
BioSource feature with a different organism name." } },
   { eErr_SEQ_DESCR_BadOrganelle,
   { "BadOrganelle",
"Note that only Kinetoplastida have kinetoplasts, and that only Chlorarchniophyta \
and Cryptophyta have nucleomorphs." } },
   { eErr_SEQ_DESCR_MultipleChromosomes,
   { "MultipleChromosomes",
"There are multiple chromosome qualifiers on this Bioseq.  With the exception of \
some pseudoautosomal genes, this is likely to be a biological annotation error." } },
   { eErr_SEQ_DESCR_BadSubSource,
   { "BadSubSource",
"Unassigned SubSource subtype." } },
   { eErr_SEQ_DESCR_BadOrgMod,
   { "BadOrgMod",
"Unassigned OrgMod subtype." } },
   { eErr_SEQ_DESCR_InconsistentProteinTitle,
   { "InconsistentProteinTitle",
"An instantiated protein title descriptor should normally be the same as the \
automatically generated title.  This may be a curated exception, or it may \
be out of synch with the current annotation." } },
   { eErr_SEQ_DESCR_Inconsistent,
   { "Inconsistent",
"There are two descriptors of the same type which are inconsistent with each \
other. Please make them consistent." } },
   { eErr_SEQ_DESCR_ObsoleteSourceLocation,
   { "ObsoleteSourceLocation",
"There is a source location that is no longer legal for use in GenBank records." } },
   { eErr_SEQ_DESCR_ObsoleteSourceQual,
   { "ObsoleteSourceQual",
"There is a source qualifier that is no longer legal for use in GenBank records." } },
   { eErr_SEQ_DESCR_StructuredSourceNote,
   { "StructuredSourceNote",
"The name of a structured source field is present as text in a note.  The data \
should probably be put into the appropriate field instead." } },
   { eErr_SEQ_DESCR_UnnecessaryBioSourceFocus,
   { "UnnecessaryBioSourceFocus",
"Focus should not be set on a BioSource descriptor in records where there is no \
BioSource feature." } },
   { eErr_SEQ_DESCR_RefGeneTrackingWithoutStatus,
   { "RefGeneTrackingWithoutStatus",
"The RefGeneTracking user object does not have the required Status field set." } },
   { eErr_SEQ_DESCR_UnwantedCompleteFlag,
   { "UnwantedCompleteFlag",
"The Mol-info.completeness flag should not be set on a genomic sequence unless \
the title also says it is a complete sequence or complete genome." } },
   { eErr_SEQ_DESCR_CollidingPublications,
   { "CollidingPublications",
"Multiple publication descriptors with the same PMID or MUID apply to a Bioseq. \
The lower-level ones are redundant, and should be removed." } },
   { eErr_SEQ_DESCR_TransgenicProblem,
   { "TransgenicProblem",
"A BioSource descriptor with /transgenic set must be accompanied by a BioSource \
feature on the nucleotide record." } },
   { eErr_SEQ_DESCR_TaxonomyLookupProblem,
   { "TaxonomyLookupProblem",
"A BioSource descriptor or feature has flags returned by taxonomy lookup that \
are either inconsistent with the data or require a taxonomy consult." } },
   { eErr_SEQ_DESCR_MultipleTitles,
   { "MultipleTitles",
"There are multiple title descriptors in the same Bioseq or BioseqSet chain." } },
   { eErr_SEQ_DESCR_RefGeneTrackingOnNonRefSeq,
   { "RefGeneTrackingOnNonRefSeq",
"The RefGeneTracking user object should only be in RefSeq records." } },
   { eErr_SEQ_DESCR_BioSourceInconsistency,
   { "BioSourceInconsistency",
"There is an internal inconsistency with specific fields in the BioSource." } },
   { eErr_SEQ_DESCR_FastaBracketTitle,
   { "FastaBracketTitle",
"Bracketed [...=...] information remains in the title.  This should have been parsed \
out during sequence record generation to obtain qualifier values." } },
   { eErr_SEQ_DESCR_MissingText,
   { "MissingText",
"Comments, regions, and other text descriptors need a descriptive text string. \
The string provided with this descriptor is empty. If no text is desired, then \
the descriptor should be removed." } },
   { eErr_SEQ_DESCR_BadCollectionDate,
   { "BadCollectionDate",
"The collection date is not in the required format." } },
   { eErr_SEQ_DESCR_BadPCRPrimerSequence,
   { "BadPCRPrimerSequence",
"The PCR primer sequence has illegal characters or non-IUPAC nucleotides." } },
   { eErr_SEQ_DESCR_BadPunctuation,
   { "BadPunctuation",
"The title ends with incorrect punctuation marks." } },
   { eErr_SEQ_DESCR_BadPCRPrimerName,
   { "BadPCRPrimerName",
"The PCR primer name appears to be a sequence instead of an identifying label." } },
   { eErr_SEQ_DESCR_BioSourceOnProtein,
   { "BioSourceOnProtein",
"A BioSource descriptor should not be placed on a protein that is in a nuc-prot set." } },
   { eErr_SEQ_DESCR_BioSourceDbTagConflict,
   { "BioSourceDbTagConflict",
"Multiple db_xrefs with the same database should not appear on a single BioSource." } },
   { eErr_SEQ_DESCR_DuplicatePCRPrimerSequence,
   { "DuplicatePCRPrimerSequence",
"The PCR primer sequence has duplicate subsequences." } },
   { eErr_SEQ_DESCR_MultipleNames,
   { "MultipleNames",
"There are multiple name descriptors in the same Bioseq or BioseqSet chain." } },
   { eErr_SEQ_DESCR_MultipleComments,
   { "MultipleComments",
"There are multiple identical comment descriptors in the same Bioseq or BioseqSet chain." } },
   { eErr_SEQ_DESCR_LatLonProblem,
   { "LatLonProblem",
"There is a problem with the lat_lon qualifier in the BioSource." } },
   { eErr_SEQ_DESCR_LatLonFormat,
   { "LatLonFormat",
"The format of lat_lon should be dd.dd N|S ddd.dd E|W." } },
   { eErr_SEQ_DESCR_LatLonRange,
   { "LatLonRange",
"Latitude or longitude is out of range." } },
   { eErr_SEQ_DESCR_LatLonValue,
   { "LatLonValue",
"Latitude or longitude values appear to be in the wrong hemisphere or swapped." } },
   { eErr_SEQ_DESCR_LatLonCountry,
   { "LatLonCountry",
"The lat_lon coordinate does not map to the indicated country." } },
   { eErr_SEQ_DESCR_LatLonState,
   { "LatLonState",
"The lat_lon coordinate does not map to the indicated state or province." } },
   { eErr_SEQ_DESCR_BadSpecificHost,
   { "BadSpecificHost",
"A BioSource descriptor or feature has a specific host value that may \
require a taxonomy consult." } },
   { eErr_SEQ_DESCR_RefGeneTrackingIllegalStatus,
   { "RefGeneTrackingIllegalStatus",
"The RefGeneTracking user object has an illegal Status value." } },
   { eErr_SEQ_DESCR_ReplacedCountryCode,
   { "ReplacedCountryCode",
"The country code (up to the first colon) is no longer on the approved list of countries." } },
   { eErr_SEQ_DESCR_BadInstitutionCode,
   { "BadInstitutionCode",
"The institution (or institution: collection) code is not on the approved list." } },
   { eErr_SEQ_DESCR_BadCollectionCode,
   { "BadCollectionCode",
"The institution code is recognized, but the collection is not on the approved list." } },
   { eErr_SEQ_DESCR_BadVoucherID,
   { "BadVoucherID",
"The voucher is missing a specific identifier." } },
   { eErr_SEQ_DESCR_UnstructuredVoucher,
   { "UnstructuredVoucher",
"The voucher needs to be structured as \"<institution-code>:[<collection-code>:]<culture_id>\"." } },
   { eErr_SEQ_DESCR_ChromosomeLocation,
   { "ChromosomeLocation",
"BioSource location is not usually chromosome." } },
   { eErr_SEQ_DESCR_MultipleSourceQualifiers,
   { "MultipleSourceQualifiers",
"BioSource has unexpected multiple qualifiers of the same type." } },
   { eErr_SEQ_DESCR_UnbalancedParentheses,
   { "UnbalancedParentheses",
"Qualifier should have matching ( and ) parentheses or [ and ] brackets." } },
   { eErr_SEQ_DESCR_MultipleSourceVouchers,
   { "MultipleSourceVouchers",
"BioSource has unexpected multiple bio_material/culture_collection/specimen_voucher \
from the same institution." } },
   { eErr_SEQ_DESCR_BadCountryCapitalization,
   { "BadCountryCapitalization",
"The country code does not use the correct capitalization." } },
   { eErr_SEQ_DESCR_WrongVoucherType,
   { "WrongVoucherType",
"The institution (or institution: collection) code normally uses a different \
bio_material/culture_collection/specimen_voucher type." } },
   { eErr_SEQ_DESCR_UserObjectProblem,
   { "UserObjectProblem",
"The user object is missing required fields or has invalid data." } },
   { eErr_SEQ_DESCR_TitleHasPMID,
   { "TitleHasPMID",
"The title has (PMID #####) embedded in it." } },
   { eErr_SEQ_DESCR_BadKeyword,
   { "BadKeyword",
"The keyword is not appropriate in this record." } },
   { eErr_SEQ_DESCR_NoOrganismInTitle,
   { "NoOrganismInTitle",
"A RefSeq record should have the organism name at the beginning of a nucleotide title and bracketed at the end of a protein title." } },
   { eErr_SEQ_DESCR_MissingChromosome,
   { "MissingChromosome",
"An NC or AC RefSeq record should have a chromosome annotated." } },
   { eErr_SEQ_DESCR_LatLonAdjacent,
   { "LatLonAdjacent",
"The lat_lon coordinate may be in an adjacent country or in surrounding waters." } },
   { eErr_SEQ_DESCR_BadStrucCommInvalidFieldName,
   { "BadStrucCommInvalidFieldName",
"Structured comment is missing required fields or field values do not conform to correct format." } },
   { eErr_SEQ_DESCR_BadStrucCommInvalidFieldValue,
   { "BadStrucCommInvalidFieldValue",
"Structured comment is missing required fields or field values do not conform to correct format." } },
   { eErr_SEQ_DESCR_BadStrucCommMissingField,
   { "BadStrucCommMissingField",
"Structured comment is missing required fields or field values do not conform to correct format." } },
   { eErr_SEQ_DESCR_BadStrucCommFieldOutOfOrder,
   { "BadStrucCommFieldOutOfOrder",
"Structured comment is missing required fields or field values do not conform to correct format." } },
   { eErr_SEQ_DESCR_BadStrucCommMultipleFields,
   { "BadStrucCommMultipleFields",
"Structured comment is missing required fields or field values do not conform to correct format." } },
   { eErr_SEQ_DESCR_BioSourceNeedsChromosome,
   { "BioSourceNeedsChromosome",
"Chromosome should be set on a BioSource descriptor in non-viral complete genomes." } },
   { eErr_SEQ_DESCR_MolInfoConflictsWithBioSource,
   { "MolInfoConflictsWithBioSource",
"Viral lineage information conflicts with MolInfo." } },
   { eErr_SEQ_DESCR_MissingKeyword,
   { "MissingKeyword",
"Expected keyword was not found." } },
   { eErr_SEQ_DESCR_FakeStructuredComment,
   { "FakeStructuredComment",
"Comment descriptor may have been formatted to look like structured comment." } },
   { eErr_SEQ_DESCR_StructuredCommentPrefixOrSuffixMissing,
   { "StructuredCommentPrefixOrSuffixMissing",
"Structured comments should have a prefix or suffix." } },
   { eErr_SEQ_DESCR_LatLonWater,
   { "LatLonWater",
"The lat_lon coordinate map in a body of water." } },
   { eErr_SEQ_DESCR_LatLonOffshore,
   { "LatLonOffshore",
"The lat_lon coordinate is probably in a minor or unnamed body of water." } },
   { eErr_SEQ_DESCR_MissingPersonalCollectionName,
   { "MissingPersonalCollectionName",
"The personal collection does not indicate the name of the collector." } },
   { eErr_SEQ_DESCR_LatLonPrecision,
   { "LatLonPrecision",
"The precision of lat_lon should be dd.dd N|S ddd.dd E|W." } },
   { eErr_SEQ_DESCR_DBLinkProblem,
   { "DBLinkProblem",
"Only one DBLink user object with approved databases should apply to each Bioseq." } },
   { eErr_SEQ_DESCR_FinishedStatusForWGS,
   { "FinishedStatusForWGS",
"WGS projects should not have the Genome-Assembly-Data structured comment current \
finishing status set to Finished." } },
   { eErr_SEQ_DESCR_BadTentativeName,
   { "BadTentativeName",
"A structured comment descriptor or feature has a tentative name value that may \
require a taxonomy consult." } },
   { eErr_SEQ_DESCR_OrganismNotFound,
   { "OrganismNotFound",
"The indicated organism is not in the taxonomy database." } },
   { eErr_SEQ_DESCR_TaxonomyIsSpeciesProblem,
   { "TaxonomyIsSpeciesProblem",
"Taxonomy lookup of the indicated organism reports an is_species_level problem." } },
   { eErr_SEQ_DESCR_TaxonomyConsultRequired,
   { "TaxonomyConsultRequired",
"A taxonomy consult is required for the indicated organism." } },
   { eErr_SEQ_DESCR_TaxonomyNucleomorphProblem,
   { "TaxonomyNucleomorphProblem",
"Taxonomy lookup indicates that the nucleomorph flag should be set for this organism." } },
   { eErr_SEQ_DESCR_InconsistentMolTypeBiomol,
   { "InconsistentMolTypeBiomol",
"The Bioseq instance molecule field is inconsistent with the Mol-info biomol field." } },
   { eErr_SEQ_DESCR_BadInstitutionCountry,
   { "BadInstitutionCountry",
"The institution (or institution: collection) code should not have a <country> modifier." } },
   { eErr_SEQ_DESCR_AmbiguousSpecificHost,
   { "AmbiguousSpecificHost",
"A BioSource descriptor or feature has an ambiguous specific host value that may \
require a taxonomy consult." } },
   { eErr_SEQ_DESCR_BadAltitude,
   { "BadAltitude",
"The altitude must be reported as a number followed by m (for meters) and a period." } },
   { eErr_SEQ_DESCR_RefGeneTrackingOnNucProtSet,
   { "RefGeneTrackingOnNucProtSet",
"The RefGeneTracking user object should not be on a nuc-prot set." } },

/* SEQ_GENERIC */

   { eErr_GENERIC_NonAsciiAsn,
   { "NonAsciiAsn",
"There is a non-ASCII type character in this entry." } },
   { eErr_GENERIC_Spell,
   { "Spell",
"There is a potentially misspelled word in this entry." } },
   { eErr_GENERIC_AuthorListHasEtAl,
   { "AuthorListHasEtAl",
"The author list contains et al, which should be replaced with the \
remaining author names." } },
   { eErr_GENERIC_MissingPubInfo,
   { "MissingPubInfo",
"The publication is missing essential information, such as title or authors." } },
   { eErr_GENERIC_UnnecessaryPubEquiv,
   { "UnnecessaryPubEquiv",
"A nested Pub-equiv is not normally expected in a publication.  This may prevent \
proper display of all publication information." } },
   { eErr_GENERIC_BadPageNumbering,
   { "BadPageNumbering",
"The publication page numbering is suspect." } },
   { eErr_GENERIC_MedlineEntryPub,
   { "MedlineEntryPub",
"Publications should not be of type medline-entry.  This has abstract and MeSH \
term information that does not appear in the GenBank flatfile.  Type cit-art \
should be used instead." } },
   { eErr_GENERIC_BadDate,
   { "BadDate",
"There are bad values for month, day, or year in a date." } },
   { eErr_GENERIC_StructuredCitGenCit,
   { "StructuredCitGenCit",
"The publication has title or journal embedded in the unstructured citgen.cit \
field." } },
   { eErr_GENERIC_CollidingSerialNumbers,
   { "CollidingSerialNumbers",
"Multiple publications have the same serial number explicitly recorded in the \
data." } },
   { eErr_GENERIC_EmbeddedScript,
   { "EmbeddedScript",
"Script or other markup tags should not be used in sequence record fields." } },
   { eErr_GENERIC_PublicationInconsistency,
   { "PublicationInconsistency",
"Some fields in the publication should not be present with other fields." } },
   { eErr_GENERIC_SgmlPresentInText,
   { "SgmlPresentInText",
"SGML markup is embedded in text." } },
   { eErr_GENERIC_UnexpectedPubStatusComment,
   { "UnexpectedPubStatusComment",
"An unexpected publication status exists for a print, online-only, or ahead-of-print article : Content-Of-Pubdesc.comment-String." } },
   { eErr_GENERIC_PastReleaseDate,
   { "PastReleaseDate",
"The record has is marked as hold-until-published, but the release anyway date has already passed." } },
   { eErr_GENERIC_MissingISOJTA,
   { "MissingISOJTA",
"The publication journal is missing an ISO journal title abbreviation." } },
   { eErr_GENERIC_MissingVolume,
   { "MissingVolume",
"The publication volume is missing." } },
   { eErr_GENERIC_MissingVolumeEpub,
   { "MissingVolumeEpub",
"The electronic publication volume is missing." } },
   { eErr_GENERIC_MissingPages,
   { "MissingPages",
"The publication pages are missing." } },
   { eErr_GENERIC_MissingPagesEpub,
   { "MissingPagesEpub",
"The electronic publication pages are missing." } },

/* SEQ_PKG */

   { eErr_SEQ_PKG_NoCdRegionPtr,
   { "NoCdRegionPtr",
"A protein is found in this entry, but the coding region has not been \
described. Please add a CdRegion feature to the nucleotide Bioseq." } },
   { eErr_SEQ_PKG_NucProtProblem,
   { "NucProtProblem",
"Both DNA and protein sequences were expected, but one of the two seems to be \
missing. Perhaps this is the wrong package to use." } },
   { eErr_SEQ_PKG_SegSetProblem,
   { "SegSetProblem",
"A segmented sequence was expected, but it was not found. Perhaps this is the \
wrong package to use." } },
   { eErr_SEQ_PKG_EmptySet,
   { "EmptySet",
"No Bioseqs were found in this BioseqSet. Is that what was intended?" } },
   { eErr_SEQ_PKG_NucProtNotSegSet,
   { "NucProtNotSegSet",
"A nuc-prot set should not contain any other BioseqSet except segset." } },
   { eErr_SEQ_PKG_SegSetNotParts,
   { "SegSetNotParts",
"A segset should not contain any other BioseqSet except parts." } },
   { eErr_SEQ_PKG_SegSetMixedBioseqs,
   { "SegSetMixedBioseqs",
"A segset should not contain both nucleotide and protein Bioseqs." } },
   { eErr_SEQ_PKG_PartsSetMixedBioseqs,
   { "PartsSetMixedBioseqs",
"A parts set should not contain both nucleotide and protein Bioseqs." } },
   { eErr_SEQ_PKG_PartsSetHasSets,
   { "PartsSetHasSets",
"A parts set should not contain BioseqSets." } },
   { eErr_SEQ_PKG_FeaturePackagingProblem,
   { "FeaturePackagingProblem",
"A feature should be packaged on its bioseq, or on a set containing the Bioseq." } },
   { eErr_SEQ_PKG_GenomicProductPackagingProblem,
   { "GenomicProductPackagingProblem",
"The product of an mRNA feature in a genomic product set should point to a cDNA \
Bioseq packaged in the set, perhaps within a nuc-prot set.  RefSeq records may \
however be referenced remotely." } },
   { eErr_SEQ_PKG_InconsistentMolInfoBiomols,
   { "InconsistentMolInfoBiomols",
"Mol-info.biomol is inconsistent within a segset, parts set, or pop/phy/mut/eco set." } },
   { eErr_SEQ_PKG_ArchaicFeatureLocation,
   { "ArchaicFeatureLocation",
"A feature location should refer to the accession or gi number, not a local or general ID." } },
   { eErr_SEQ_PKG_ArchaicFeatureProduct,
   { "ArchaicFeatureProduct",
"A feature product should refer to the accession or gi number, not a local or general ID." } },
   { eErr_SEQ_PKG_GraphPackagingProblem,
   { "GraphPackagingProblem",
"A graph should be packaged on its bioseq, or on a set containing the Bioseq." } },
   { eErr_SEQ_PKG_InternalGenBankSet,
   { "InternalGenBankSet",
"An outer BioseqSet should not contain an internal BioseqSet of class genbank." } },
   { eErr_SEQ_PKG_ConSetProblem,
   { "ConSetProblem",
"BioseqSet class should not be conset." } },
   { eErr_SEQ_PKG_NoBioseqFound,
   { "NoBioseqFound",
"No Bioseqs were found in the entire record." } },
   { eErr_SEQ_PKG_INSDRefSeqPackaging,
   { "INSDRefSeqPackaging",
"INSD and RefSeq records should not be packaged together." } },
   { eErr_SEQ_PKG_GPSnonGPSPackaging,
   { "GPSnonGPSPackaging",
"Genomic product set records should not be packaged with other set types." } },
   { eErr_SEQ_PKG_RefSeqPopSet,
   { "RefSeqPopSet",
"RefSeq records should not be packaged in a popset." } },
   { eErr_SEQ_PKG_BioseqSetClassNotSet,
   { "BioseqSetClassNotSet",
"The BioseqSet class field is not set." } },
   { eErr_SEQ_PKG_OrphanedProtein,
   { "OrphanedProtein",
"The Bioseq is an INSD or RefSeq protein erroneously not in a nuc-prot set." } },
   { eErr_SEQ_PKG_MissingSetTitle,
   { "MissingSetTitle",
"No title was found on a pop/phy/mut/eco set." } },
   { eErr_SEQ_PKG_NucProtSetHasTitle,
   { "NucProtSetHasTitle",
"A title descriptor was found on a nuc-prot set." } },
   { eErr_SEQ_PKG_ComponentMissingTitle,
   { "ComponentMissingTitle",
"A title descriptor should be present on the components of a pop/phy/mut/eco set." } },
   { eErr_SEQ_PKG_SingleItemSet,
   { "SingleItemSet",
"Only a single Bioseq was found in this BioseqSet. Is that what was intended?" } },
   { eErr_SEQ_PKG_MisplacedMolInfo,
   { "MisplacedMolInfo",
"Mol-info should not be on a pop/phy/mut/eco/wgs/genbank/genprod set." } },
   { eErr_SEQ_PKG_ImproperlyNestedSets,
   { "ImproperlyNestedSets",
"A pop/phy/mut/eco/wgs set has an unexpected internal set other than nuc-prot, seg-set, or parts set." } },

/* SEQ_FEAT */

   { eErr_SEQ_FEAT_InvalidForType,
   { "InvalidForType",
"This feature type is illegal on this type of Bioseq." } },
   { eErr_SEQ_FEAT_PartialProblem,
   { "PartialProblem",
"There are several places in an entry where a sequence can be described as \
either partial or complete. In this entry, these settings are inconsistent. \
Make sure that the location and product Seq-locs, the Bioseqs, and the \
SeqFeat partial flag all agree in describing this SeqFeat as partial or \
complete." } },
   { eErr_SEQ_FEAT_InvalidType,
   { "InvalidType",
"A feature with an invalid type has been detected. This is most likely a \
software problem." } },
   { eErr_SEQ_FEAT_Range,
   { "Range",
"The coordinates describing the location of a feature do not fall within the \
sequence itself. A feature location or a product Seq-loc is out of range of \
the Bioseq it points to." } },
   { eErr_SEQ_FEAT_MixedStrand,
   { "MixedStrand",
"Mixed strands (plus and minus) have been found in the same location. While \
this is biologically possible, it is very unusual. Please check that this is \
really what you mean." } },
   { eErr_SEQ_FEAT_SeqLocOrder,
   { "SeqLocOrder",
"This location has intervals that are out of order. While whis is biologically \
possible, it is very unusual. Please check that this is really what you mean." } },
   { eErr_SEQ_FEAT_CdTransFail,
   { "CdTransFail",
"A fundamental error occurred in software while attempting to translate this \
coding region. It is either a software problem or sever data corruption." } },
   { eErr_SEQ_FEAT_StartCodon,
   { "StartCodon",
"An illegal start codon was used. Some possible explanations are: (1) the \
wrong genetic code may have been selected; (2) the wrong reading frame may \
be in use; or (3) the coding region may be incomplete at the 5' end, in \
which case a partial location should be indicated." } },
   { eErr_SEQ_FEAT_InternalStop,
   { "InternalStop",
"Internal stop codons are found in the protein sequence. Some possible \
explanations are: (1) the wrong genetic code may have been selected; (2) the \
wrong reading frame may be in use; (3) the coding region may be incomplete \
at the 5' end, in which case a partial location should be indicated; or (4) \
the CdRegion feature location is incorrect." } },
   { eErr_SEQ_FEAT_NoProtein,
   { "NoProtein",
"Normally a protein sequence is supplied. This sequence can then be compared \
with the translation of the coding region. In this entry, no protein Bioseq \
was found, and the comparison could not be made." } },
   { eErr_SEQ_FEAT_MisMatchAA,
   { "MisMatchAA",
"The protein sequence that was supplied is not identical to the translation \
of the coding region. Mismatching amino acids are found between these two \
sequences." } },
   { eErr_SEQ_FEAT_TransLen,
   { "TransLen",
"The protein sequence that was supplied is not the same length as the \
translation of the coding region. Please determine why they are different." } },
   { eErr_SEQ_FEAT_NoStop,
   { "NoStop",
"A coding region that is complete should have a stop codon at the 3'end.  A \
stop codon was not found on this sequence, although one was expected." } },
   { eErr_SEQ_FEAT_TranslExcept,
   { "TranslExcept",
"An unparsed \transl_except qualifier was found. This indicates a parser \
problem." } },
   { eErr_SEQ_FEAT_NoProtRefFound,
   { "NoProtRefFound",
"The name and description of the protein is missing from this entry. Every \
protein Bioseq must have one full-length Prot-ref feature to provide this \
information." } },
   { eErr_SEQ_FEAT_NotSpliceConsensus,
   { "NotSpliceConsensus",
"Splice junctions typically have GT as the first two bases of the intron \
(splice donor) and AG as the last two bases of the intron (splice acceptor). \
This intron does not conform to that pattern." } },
   { eErr_SEQ_FEAT_OrfCdsHasProduct,
   { "OrfCdsHasProduct",
"A coding region flagged as orf has a protein product.  There should be no \
protein product bioseq on an orf." } },
   { eErr_SEQ_FEAT_GeneRefHasNoData,
   { "GeneRefHasNoData",
"A gene feature exists with no locus name or other fields filled in." } },
   { eErr_SEQ_FEAT_ExceptInconsistent,
   { "ExceptInconsistent",
"A coding region has an exception gbqual but the excpt flag is not set." } },
   { eErr_SEQ_FEAT_ProtRefHasNoData,
   { "ProtRefHasNoData",
"A protein feature exists with no name or other fields filled in." } },
   { eErr_SEQ_FEAT_GenCodeMismatch,
   { "GenCodeMismatch",
"The genetic code stored in the BioSource is different than that for this CDS." } },
   { eErr_SEQ_FEAT_RNAtype0,
   { "RNAtype0",
"RNA type 0 (unknown RNA) should be type 255 (other)." } },
   { eErr_SEQ_FEAT_UnknownImpFeatKey,
   { "UnknownImpFeatKey",
"An import feature has an unrecognized key." } },
   { eErr_SEQ_FEAT_UnknownImpFeatQual,
   { "UnknownImpFeatQual",
"An import feature has an unrecognized qualifier." } },
   { eErr_SEQ_FEAT_WrongQualOnImpFeat,
   { "WrongQualOnImpFeat",
"This qualifier is not legal for this feature." } },
   { eErr_SEQ_FEAT_MissingQualOnImpFeat,
   { "MissingQualOnImpFeat",
"An essential qualifier for this feature is missing." } },
   { eErr_SEQ_FEAT_PseudoCdsHasProduct,
   { "PseudoCdsHasProduct",
"A coding region flagged as pseudo has a protein product.  There should be no \
protein product bioseq on a pseudo CDS." } },
   { eErr_SEQ_FEAT_IllegalDbXref,
   { "IllegalDbXref",
"The database in a cross-reference is not on the list of officially \
recognized database abbreviations." } },
   { eErr_SEQ_FEAT_FarLocation,
   { "FarLocation",
"The location has a reference to a bioseq that is not packaged in this record." } },
   { eErr_SEQ_FEAT_DuplicateFeat,
   { "DuplicateFeat",
"The intervals on this feature are identical to another feature of the same type, \
but the label or comment are different." } },
   { eErr_SEQ_FEAT_UnnecessaryGeneXref,
   { "UnnecessaryGeneXref",
"This feature has a gene xref that is identical to the overlapping gene.  This is \
redundant, and probably should be removed." } },
   { eErr_SEQ_FEAT_TranslExceptPhase,
   { "TranslExceptPhase",
"A \transl_except qualifier was not on a codon boundary." } },
   { eErr_SEQ_FEAT_TrnaCodonWrong,
   { "TrnaCodonWrong",
"The tRNA codon recognized does not code for the indicated amino acid using the \
specified genetic code." } },
   { eErr_SEQ_FEAT_BothStrands,
   { "BothStrands",
"Feature location indicates that it is on both strands. This is not biologically \
possible for this kind of feature. Please indicate the correct strand (plus or \
minus) for this feature." } },
   { eErr_SEQ_FEAT_CDSgeneRange,
   { "CDSgeneRange",
"A CDS is overlapped by a gene feature, but is not completely contained by it. \
This may be an annotation error." } },
   { eErr_SEQ_FEAT_CDSmRNArange,
   { "CDSmRNArange",
"A CDS is overlapped by an mRNA feature, but the mRNA does not cover all \
intervals (i.e., exons) on the CDS. This may be an annotation error." } },
   { eErr_SEQ_FEAT_OverlappingPeptideFeat,
   { "OverlappingPeptideFeat",
"The intervals on this processed protein feature overlap another protein feature. \
This may be caused by errors in originally annotating these features on DNA coordinates, \
where start or stop positions do not occur in between codon boundaries.  These then \
appear as errors when the features are converted to protein coordinates by mapping \
through the CDS." } },
   { eErr_SEQ_FEAT_SerialInComment,
   { "SerialInComment",
"Comments that refer to the conclusions of a specific reference should not be \
cited by a serial number inside brackets (e.g., [3]), but should instead be \
attached as a REMARK on the reference itself." } },
   { eErr_SEQ_FEAT_MultipleCDSproducts,
   { "MultipleCDSproducts",
"More than one CDS feature points to the same protein product.  This can happen with \
viral long terminal repeats (LTRs), but GenBank policy is to have each equivalent \
CDS point to a separately accessioned protein Bioseq." } },
   { eErr_SEQ_FEAT_FocusOnBioSourceFeature,
   { "FocusOnBioSourceFeature",
"The /focus flag is only appropriate on BioSource descriptors, not BioSource features." } },
   { eErr_SEQ_FEAT_PeptideFeatOutOfFrame,
   { "PeptideFeatOutOfFrame",
"The start or stop positions of this processed peptide feature do not occur in between \
codon boundaries.  This may incorrectly overlap other peptides when the features are \
converted to protein coordinates by mapping through the CDS." } },
   { eErr_SEQ_FEAT_InvalidQualifierValue,
   { "InvalidQualifierValue",
"The value of this qualifier is constrained to a particular vocabulary of style.  This \
value does not conform to those constraints.  Please see the feature table documentation \
for more information." } },
   { eErr_SEQ_FEAT_MultipleMRNAproducts,
   { "MultipleMRNAproducts",
"More than one mRNA feature points to the same cDNA product.  This is an error in the \
genomic product set.  Each mRNA feature should have a unique product Bioseq." } },
   { eErr_SEQ_FEAT_mRNAgeneRange,
   { "mRNAgeneRange",
"An mRNA is overlapped by a gene feature, but is not completely contained by it. \
This may be an annotation error." } },
   { eErr_SEQ_FEAT_TranscriptLen,
   { "TranscriptLen",
"The mRNA sequence that was supplied is not the same length as the \
transcription of the mRNA feature. Please determine why they are different." } },
   { eErr_SEQ_FEAT_TranscriptMismatches,
   { "TranscriptMismatches",
"The mRNA sequence and the transcription of the mRNA feature are different. \
If the number is large, it may indicate incorrect intron/exon boundaries." } },
   { eErr_SEQ_FEAT_CDSproductPackagingProblem,
   { "CDSproductPackagingProblem",
"The nucleotide location and protein product of the CDS are not packaged together \
in the same nuc-prot set.  This may be an error in the software used to create \
the record." } },
   { eErr_SEQ_FEAT_DuplicateInterval,
   { "DuplicateInterval",
"The location has identical adjacent intervals, e.g., a duplicate exon reference." } },
   { eErr_SEQ_FEAT_PolyAsiteNotPoint,
   { "PolyAsiteNotPoint",
"A polyA_site should be at a single nucleotide position." } },
   { eErr_SEQ_FEAT_ImpFeatBadLoc,
   { "ImpFeatBadLoc",
"An import feature loc field does not equal the feature location.  This should be \
corrected, and then the loc field should be cleared." } },
   { eErr_SEQ_FEAT_LocOnSegmentedBioseq,
   { "LocOnSegmentedBioseq",
"Feature locations traditionally go on the individual parts of a segmented bioseq, not \
on the segmented sequence itself.  These features are invisible in asn2ff reports, and \
are now being flagged for correction." } },
   { eErr_SEQ_FEAT_UnnecessaryCitPubEquiv,
   { "UnnecessaryCitPubEquiv",
"A set of citations on a feature should not normally have a nested Pub-equiv construct. \
This may prevent proper matching to the correct publication." } },
   { eErr_SEQ_FEAT_ImpCDShasTranslation,
   { "ImpCDShasTranslation",
"A CDS that has known translation errors cannot have a /translation qualifier." } },
   { eErr_SEQ_FEAT_ImpCDSnotPseudo,
   { "ImpCDSnotPseudo",
"A CDS that has known translation errors must be marked as pseudo to suppress the \
translation." } },
   { eErr_SEQ_FEAT_MissingMRNAproduct,
   { "MissingMRNAproduct",
"The mRNA feature points to a cDNA product that is not packaged in the record. \
This is an error in the genomic product set." } },
   { eErr_SEQ_FEAT_AbuttingIntervals,
   { "AbuttingIntervals",
"The start of one interval is next to the stop of another.  A single interval \
may be desirable in this case." } },
   { eErr_SEQ_FEAT_CollidingGeneNames,
   { "CollidingGeneNames",
"Two gene features should not have the same name." } },
   { eErr_SEQ_FEAT_MultiIntervalGene,
   { "MultiIntervalGene",
"A gene feature on a single Bioseq should have a single interval spanning everything \
considered to be under that gene." } },
   { eErr_SEQ_FEAT_FeatContentDup,
   { "FeatContentDup",
"The intervals on this feature are identical to another feature of the same type, \
and the label and comment are also identical. This is likely to be an error in \
annotating the record.  Note that GenBank format suppresses duplicate features, \
so use of Graphic view is recommended." } },
   { eErr_SEQ_FEAT_BadProductSeqId,
   { "BadProductSeqId",
"The feature product refers to a database ID that has a locus name but no accession. \
This is probably an error in parsing of a submission." } },
   { eErr_SEQ_FEAT_RnaProductMismatch,
   { "RnaProductMismatch",
"The RNA feature product type does not correspond to the RNA feature type.  These \
need to be consistent." } },
   { eErr_SEQ_FEAT_MissingCDSproduct,
   { "MissingCDSproduct",
"The CDS should have a product, but does not.  Pseudo or short CDSs (less than 6 \
amino acids), or those marked with a rearrangement required for product exception, \
are exempt from needing a product." } },
   { eErr_SEQ_FEAT_BadTrnaCodon,
   { "BadTrnaCodon",
"The tRNA codon recognized is an illegal value." } },
   { eErr_SEQ_FEAT_BadTrnaAA,
   { "BadTrnaAA",
"The tRNA encoded amino acid is an illegal value." } },
   { eErr_SEQ_FEAT_OnlyGeneXrefs,
   { "OnlyGeneXrefs",
"There are gene xrefs but no gene features.  Records should normally have single-interval \
gene features covering other biological features.  Gene xrefs are used only to override \
the inheritance by overlap." } },
   { eErr_SEQ_FEAT_UTRdoesNotAbutCDS,
   { "UTRdoesNotAbutCDS",
"The 5'UTR and 3'UTR features should exactly abut the CDS feature." } },
   { eErr_SEQ_FEAT_BadConflictFlag,
   { "BadConflictFlag",
"The coding region conflict flag is set, but the translated product is the \
same as the instantiated product Bioseq." } },
   { eErr_SEQ_FEAT_ConflictFlagSet,
   { "ConflictFlagSet",
"The coding region conflict flag is appropriately set, but this record should \
be brought to the attention of the source database for possible correction." } },
   { eErr_SEQ_FEAT_LocusTagProblem,
   { "LocusTagProblem",
"A gene locus_tag should be a single token, with no spaces." } },
   { eErr_SEQ_FEAT_CollidingLocusTags,
   { "CollidingLocusTags",
"Two gene features should not have the same locus_tag, which is supposed to be \
a unique identifer." } },
   { eErr_SEQ_FEAT_AltStartCodon,
   { "AltStartCodon",
"An alternative start codon was used. This is rare, and it is expected that \
confirmatory evidence will be cited." } },
   { eErr_SEQ_FEAT_PartialsInconsistent,
   { "PartialsInconsistent",
"There are several places in an entry where a sequence can be described as \
either partial or complete. In this entry, these settings are inconsistent. \
Make sure that the location and product Seq-locs, the Bioseqs, and the \
SeqFeat partial flag all agree in describing this SeqFeat as partial or \
complete." } },
   { eErr_SEQ_FEAT_GenesInconsistent,
   { "GenesInconsistent",
"The gene on the genomic sequence of a genomic product set should be the \
same as the gene on the cDNA product of the mRNA feature." } },
   { eErr_SEQ_FEAT_DuplicateTranslExcept,
   { "DuplicateTranslExcept",
"There are multiple /transl_except qualifiers at the same location on this \
CDS but with different amino acids indicated." } },
   { eErr_SEQ_FEAT_TranslExceptAndRnaEditing,
   { "TranslExceptAndRnaEditing",
"A CDS has both /exception=RNA editing and /transl_except qualifiers.  RNA \
editing indicates post-transcriptional changes prior to translation.  Use \
/transl_except for individual codon exceptions such as selenocysteine or \
other nonsense suppressors." } },
   { eErr_SEQ_FEAT_NoNameForProtein,
   { "NoNameForProtein",
"A protein feature has a description, but no product name." } },
   { eErr_SEQ_FEAT_TaxonDbxrefOnFeature,
   { "TaxonDbxrefOnFeature",
"A BioSource feature has a taxonID database identifier in the db_xref area \
common to all features. This db_xref should only exist within the separate \
BioSource xref list." } },
   { eErr_SEQ_FEAT_UnindexedFeature,
   { "UnindexedFeature",
"The location of a feature does not allow it to be mapped to a single Bioseq, \
or to the segmented parent if on one or more part Bioseqs. It will not show \
up in flatfile and other formats, and should be corrected or removed." } },
   { eErr_SEQ_FEAT_CDSmRNAmismatch,
   { "CDSmRNAmismatch",
"There should usually be a one-to-one correspondence between mRNA and CDS \
under a given gene." } },
   { eErr_SEQ_FEAT_UnnecessaryException,
   { "UnnecessaryException",
"The feature is marked with an exception qualifier, but the validator does \
not detect an error that needs to be suppressed." } },
   { eErr_SEQ_FEAT_LocusTagProductMismatch,
   { "LocusTagProductMismatch",
"In certain records a policy is that the locus_tag of the gene is expected to \
match the prefix of the general ID of the CDS or mRNA product Bioseq." } },
   { eErr_SEQ_FEAT_MrnaTransFail,
   { "MrnaTransFail",
"A fundamental error occurred in software while attempting to transcribe this \
messenger RNA. It is either a software problem or sever data corruption." } },
   { eErr_SEQ_FEAT_PseudoCdsViaGeneHasProduct,
   { "PseudoCdsViaGeneHasProduct",
"A coding region overlapped by a pseudo gene has a protein product.  There \
should be no protein product bioseq on a pseudo CDS." } },
   { eErr_SEQ_FEAT_MissingGeneXref,
   { "MissingGeneXref",
"This feature has multiple overlapping genes of the same length, but no \
xref to determine which one should be used for the /gene qualifier." } },
   { eErr_SEQ_FEAT_FeatureCitationProblem,
   { "FeatureCitationProblem",
"This feature has a citation to a publication that needs to be repaired." } },
   { eErr_SEQ_FEAT_NestedSeqLocMix,
   { "NestedSeqLocMix",
"A location should not have nested SEQLOC_MIX structures." } },
   { eErr_SEQ_FEAT_WrongQualOnFeature,
   { "WrongQualOnFeature",
"This qualifier is not legal for this feature." } },
   { eErr_SEQ_FEAT_MissingQualOnFeature,
   { "MissingQualOnFeature",
"An essential qualifier for this feature is missing." } },
   { eErr_SEQ_FEAT_CodonQualifierUsed,
   { "CodonQualifierUsed",
"The codon qualifier should be replaced by individual transl_except code breaks, \
after checking to make sure the proper genetic code is being used." } },
   { eErr_SEQ_FEAT_UnknownFeatureQual,
   { "UnknownFeatureQual",
"A feature has an unrecognized qualifier." } },
   { eErr_SEQ_FEAT_BadCharInAuthorName,
   { "BadCharInAuthorName",
"An author name has illegal characters." } },
   { eErr_SEQ_FEAT_PolyATail,
   { "PolyATail",
"The mRNA feature has polyA tail added to make the mRNA sequence." } },
   { eErr_SEQ_FEAT_ProteinNameEndsInBracket,
   { "ProteinNameEndsInBracket",
"The protein name ends with a right square bracket, and may have been \
copied from another GenPept record, where the organism name is \
appended to the definition line and placed inside brackets." } },
   { eErr_SEQ_FEAT_CDSwithMultipleMRNAs,
   { "CDSwithMultipleMRNAs",
"The CDS feature has more than one overlapping mRNA with the proper intervals and \
no other identification assigning it to a different coding region." } },
   { eErr_SEQ_FEAT_MultipleEquivBioSources,
   { "MultipleEquivBioSources",
"Multiple equivalent biosource features exist on the sequence. They should be \
fused into a single feature with multiple intervals." } },
   { eErr_SEQ_FEAT_MultipleEquivPublications,
   { "MultipleEquivPublications",
"Multiple equivalent publication features exist on the sequence. They should be \
fused into a single feature with multiple intervals." } },
   { eErr_SEQ_FEAT_BadFullLengthFeature,
   { "BadFullLengthFeature",
"A publication or biosource feature is on the full length the sequence. It should be \
converted to a publication or biosource descriptor." } },
   { eErr_SEQ_FEAT_RedundantFields,
   { "RedundantFields",
"A comment or other field contains information that is redundant with the primary \
field on a feature." } },
   { eErr_SEQ_FEAT_CDSwithNoMRNAOverlap,
   { "CDSwithNoMRNAOverlap",
"The CDS feature has more than one overlapping mRNA with the proper intervals and \
no other identification assigning it to a different coding region." } },
   { eErr_SEQ_FEAT_FeatureProductInconsistency,
   { "FeatureProductInconsistency",
"The CDS feature has more than one overlapping mRNA with the proper intervals and \
no other identification assigning it to a different coding region." } },
   { eErr_SEQ_FEAT_ImproperBondLocation,
   { "ImproperBondLocation",
"Only bond features should have locations of type bond. Most other features should \
use interval or point locations." } },
   { eErr_SEQ_FEAT_GeneXrefWithoutGene,
   { "GeneXrefWithoutGene",
"This feature has a gene xref, but there is no equivalent gene feature anywhere \
on the record." } },
   { eErr_SEQ_FEAT_SeqFeatXrefProblem,
   { "SeqFeatXrefProblem",
"This feature has a seqfeat xref, but it has nothing in the id or data field." } },
   { eErr_SEQ_FEAT_ProductFetchFailure,
   { "ProductFetchFailure",
"Unable to fetch the Bioseq product of this feature.  Remote fetching was requested, \
so this is likely due to a failure in a network sequence retrieval service." } },
   { eErr_SEQ_FEAT_SuspiciousGeneXref,
   { "SuspiciousGeneXref",
"This feature has a gene xref that is not expected for this organism." } },
   { eErr_SEQ_FEAT_MissingTrnaAA,
   { "MissingTrnaAA",
"The tRNA encoded amino acid is not set." } },
   { eErr_SEQ_FEAT_CollidingFeatureIDs,
   { "CollidingFeatureIDs",
"Multiple features have the same featureID.  Feature ID must be unique within \
a record." } },
   { eErr_SEQ_FEAT_ExceptionProblem,
   { "ExceptionProblem",
"There is a problem with /exception text." } },
   { eErr_SEQ_FEAT_PolyAsignalNotRange,
   { "PolyAsignalNotRange",
"A polyA_signal should be at nucleotide range position, not a single point." } },
   { eErr_SEQ_FEAT_OldLocusTagMismtach,
   { "OldLocusTagMismtach",
"The old_locus_tag qualifier on a feature does not match that on the overlapping gene." } },
   { eErr_SEQ_FEAT_DuplicateGeneOntologyTerm,
   { "DuplicateGeneOntologyTerm",
"A feature has multiple identical Gene Ontology (GO) term specifications." } },
   { eErr_SEQ_FEAT_InvalidInferenceValue,
   { "InvalidInferenceValue",
"The value of the inference qualifier is constrained by agreement of the international \
nucleotide sequence database collaboration.  This value does not conform to those \
constraints.  Please see the feature table documentation for more information." } },
   { eErr_SEQ_FEAT_HpotheticalProteinMismatch,
   { "HpotheticalProteinMismatch",
"There is a mismatch between the accession cited by the hypothetical protein claim \
and the actual accession of the record." } },
   { eErr_SEQ_FEAT_FeatureRefersToAccession,
   { "FeatureRefersToAccession",
"There is a mixture of features referring to sequence by gi numbers and by accession. \
This inconsistency is likely due to incomplete processing by software." } },
   { eErr_SEQ_FEAT_SelfReferentialProduct,
   { "SelfReferentialProduct",
"A feature product points to the same sequence that the feature location does. \
The product must point to a different sequence that is the biological product \
of the first, due to transcription, translation, or peptide processing." } },
   { eErr_SEQ_FEAT_ITSdoesNotAbutRRNA,
   { "ITSdoesNotAbutRRNA",
"The internal transcribed spacer misc_RNA features should exactly abut the flanking rRNA features." } },
   { eErr_SEQ_FEAT_FeatureSeqIDCaseDifference,
   { "FeatureSeqIDCaseDifference",
"Feature location and referenced Bioseq have the same Seq-id except for capitalization. \
Sequence identifiers must be unique in a case-insensitive manner within a record." } },
   { eErr_SEQ_FEAT_FeatureLocationIsGi0,
   { "FeatureLocationIsGi0",
"Feature location refers to gi 0. This indicates an error in database processing of this record." } },
   { eErr_SEQ_FEAT_GapFeatureProblem,
   { "GapFeatureProblem",
"Gap features must only cover gaps in the sequence, not actual bases." } },
   { eErr_SEQ_FEAT_PseudoCdsHasProtXref,
   { "PseudoCdsHasProtXref",
"A coding region flagged as pseudo has a protein cross reference.  There should be no \
protein product bioseq or protein cross reference on a pseudo CDS." } },
   { eErr_SEQ_FEAT_ErroneousException,
   { "ErroneousException",
"The feature is marked with a specific exception qualifier, but validation indicates \
that a different exception should be used." } },
   { eErr_SEQ_FEAT_SegmentedGeneProblem,
   { "SegmentedGeneProblem",
"A gene feature on the parts of a segmented Bioseq should map to a single interval on the \
segmented Bioseq's coordinate system." } },
   { eErr_SEQ_FEAT_WholeLocation,
   { "WholeLocation",
"Feature location is set to whole, the entirety of the parent sequence.  Please specify \
exact intervals for this feature location." } },
   { eErr_SEQ_FEAT_BadEcNumberFormat,
   { "BadEcNumberFormat",
"There is a problem with the format of the EC_number qualifier." } },
   { eErr_SEQ_FEAT_BadEcNumberValue,
   { "BadEcNumberValue",
"There is a problem with the value of the EC_number qualifier." } },
   { eErr_SEQ_FEAT_EcNumberProblem,
   { "EcNumberProblem",
"There is a problem with the format of the EC_number qualifier." } },
   { eErr_SEQ_FEAT_VectorContamination,
   { "VectorContamination",
"Contamination by cloning vector is annotated on this sequence. The underlying region \
should be removed from the sequence." } },
   { eErr_SEQ_FEAT_MinusStrandProtein,
   { "MinusStrandProtein",
"A feature on a protein indicates the minus strand, which does not exist." } },
   { eErr_SEQ_FEAT_BadProteinName,
   { "BadProteinName",
"A protein feature has a name that conflicts with other information on the feature." } },
   { eErr_SEQ_FEAT_GeneXrefWithoutLocus,
   { "GeneXrefWithoutLocus",
"A feature has a gene xref with a locus_tag and no locus, but the gene with that locus_tag has a locus." } },
   { eErr_SEQ_FEAT_UTRdoesNotExtendToEnd,
   { "UTRdoesNotExtendToEnd",
"The UTR does not have the expected range." } },
   { eErr_SEQ_FEAT_CDShasTooManyXs,
   { "CDShasTooManyXs",
"The CDS translation has greater than 50 percent ambiguous X residues." } },
   { eErr_SEQ_FEAT_SuspiciousFrame,
   { "SuspiciousFrame",
"The CDS has a frame greater than 1 that is not expected in this context." } },
   { eErr_SEQ_FEAT_TerminalXDiscrepancy,
   { "TerminalXDiscrepancy",
"The CDS translation and protein product sequence have a different number of terminal Xs." } },
   { eErr_SEQ_FEAT_UnnecessaryTranslExcept,
   { "UnnecessaryTranslExcept",
"The CDS translates to the same amino acid as indicated by the transl_except code break." } },
   { eErr_SEQ_FEAT_SuspiciousQualifierValue,
   { "SuspiciousQualifierValue",
"The value of this qualifier is constrained to a particular vocabulary of style.  This \
value appears not to conform to those constraints.  Please see the feature table documentation \
for more information." } },
   { eErr_SEQ_FEAT_NotSpliceConsensusDonor,
   { "NotSpliceConsensusDonor",
"Splice junctions typically have GT as the first two bases of the intron \
(splice donor) and AG as the last two bases of the intron (splice acceptor). \
This intron does not conform to that pattern." } },
   { eErr_SEQ_FEAT_NotSpliceConsensusAcceptor,
   { "NotSpliceConsensusAcceptor",
"Splice junctions typically have GT as the first two bases of the intron \
(splice donor) and AG as the last two bases of the intron (splice acceptor). \
This intron does not conform to that pattern." } },
   { eErr_SEQ_FEAT_RareSpliceConsensusDonor,
   { "RareSpliceConsensusDonor",
"Splice junctions typically have GT as the first two bases of the intron \
(splice donor) and AG as the last two bases of the intron (splice acceptor). \
This intron does not conform to that pattern." } },
   { eErr_SEQ_FEAT_SeqFeatXrefNotReciprocal,
   { "SeqFeatXrefNotReciprocal",
"Feature xrefs between CDS and mRNA are not reciprocal." } },
   { eErr_SEQ_FEAT_SeqFeatXrefFeatureMissing,
   { "SeqFeatXrefFeatureMissing",
"The feature referenced by a seqfeat xref cannot be found." } },
   { eErr_SEQ_FEAT_FeatureInsideGap,
   { "FeatureInsideGap",
"The feature is completely contained inside a sequence gap." } },
   { eErr_SEQ_FEAT_FeatureCrossesGap,
   { "FeatureCrossesGap",
"The feature extends from actual sequence into a sequence gap." } },
   { eErr_SEQ_FEAT_BadAuthorSuffix,
   { "BadAuthorSuffix",
"An author name has an unexpected suffix." } },
   { eErr_SEQ_FEAT_BadAnticodonAA,
   { "BadAnticodonAA",
"The tRNA encoded amino acid cannot be produced by any likely reverse complement \
and wobble expansion of the anticodon sequence." } },
   { eErr_SEQ_FEAT_BadAnticodonCodon,
   { "BadAnticodonCodon",
"The tRNA indicated codon recognized cannot be produced by any likely reverse complement \
and wobble expansion of the anticodon sequence." } },
   { eErr_SEQ_FEAT_BadAnticodonStrand,
   { "BadAnticodonStrand",
"The tRNA feature location and anticodon location are not on the same strand." } },
   { eErr_SEQ_FEAT_UndesiredGeneSynonym,
   { "UndesiredGeneSynonym",
"The gene synonym is uninformative." } },
   { eErr_SEQ_FEAT_UndesiredProteinName,
   { "UndesiredProteinName",
"The protein name is uninformative." } },
   { eErr_SEQ_FEAT_FeatureBeginsOrEndsInGap,
   { "FeatureBeginsOrEndsInGap",
"The feature starts or stops within a sequence gap." } },
   { eErr_SEQ_FEAT_GeneOntologyTermMissingGOID,
   { "GeneOntologyTermMissingGOID",
"A Gene Ontology (GO) term is missing the GO Identifier." } },
   { eErr_SEQ_FEAT_PseudoRnaHasProduct,
   { "PseudoRnaHasProduct",
"An RNA flagged as pseudo has a transcribed product.  There should be no \
transcribed product bioseq on a pseudo RNA." } },
   { eErr_SEQ_FEAT_PseudoRnaViaGeneHasProduct,
   { "PseudoRnaViaGeneHasProduct",
"An RNA overlapped by a pseudo gene has a transcribed product.  There \
should be no transcribed product bioseq on a pseudo RNA." } },
   { eErr_SEQ_FEAT_BadRRNAcomponentOrder,
   { "BadRRNAcomponentOrder",
"rRNA and ITS features are not in the expected order." } },
   { eErr_SEQ_FEAT_BadRRNAcomponentOverlap,
   { "BadRRNAcomponentOverlap",
"rRNA and ITS or tRNA elements should not overlap." } },
   { eErr_SEQ_FEAT_MissingGeneLocusTag,
   { "MissingGeneLocusTag",
"If one gene in a record has a locus-tag value, all genes in the record \
should have a locus-tag value." } },
   { eErr_SEQ_FEAT_MultipleProtRefs,
   { "MultipleProtRefs",
"The name and description of the protein is missing from this entry. Every \
protein Bioseq must have one full-length Prot-ref feature to provide this \
information." } },
   { eErr_SEQ_FEAT_BadInternalCharacter,
   { "BadInternalCharacter",
"Biological names or labels should not end with question mark, \
exclamation point, or tilde." } },
   { eErr_SEQ_FEAT_BadTrailingCharacter,
   { "BadTrailingCharacter",
"Biological names or labels should not contain underscore, period, \
comma, colon, or semicolon," } },
   { eErr_SEQ_FEAT_BadTrailingHyphen,
   { "BadTrailingHyphen",
"Biological names or labels should not end with a hyphen." } },
   { eErr_SEQ_FEAT_MultipleGeneOverlap,
   { "MultipleGeneOverlap",
"This genes completely contains two or more other genes." } },
   { eErr_SEQ_FEAT_BadCharInAuthorLastName,
   { "BadCharInAuthorLastName",
"An author name has illegal characters." } },
   { eErr_SEQ_FEAT_PseudoCDSmRNArange,
   { "PseudoCDSmRNArange",
"A pseudo CDS is overlapped by an mRNA feature, but the mRNA does not cover all \
intervals (i.e., exons) on the CDS. This may be an annotation error." } },
   { eErr_SEQ_FEAT_ExtendablePartialProblem,
   { "ExtendablePartialProblem",
"A partial end of this feature does not abut a gap and does not include the first \
or last nucleotide in the sequence, but it could be extended by one or two \
nucleotides to do so." } },
   { eErr_SEQ_FEAT_GeneXrefNeeded,
   { "GeneXrefNeeded",
"This feature has multiple overlapping genes of the same length and same name, \
but no xref to determine which one should be used for the /gene qualifier." } },
   { eErr_SEQ_FEAT_RubiscoProblem,
   { "RubiscoProblem",
"A protein name contains ribulose and bisphosphate but does not use \
the prefered formal naming convention." } },
   { eErr_SEQ_FEAT_UnqualifiedException,
   { "UnqualifiedException",
"The feature is marked with an automatically supplied exception qualifier \
that should be replaced or supplemented with more informative information." } },
   { eErr_SEQ_FEAT_ProteinNameHasPMID,
   { "ProteinNameHasPMID",
"The protein name has (PMID #####) embedded in it." } },
   { eErr_SEQ_FEAT_BadGeneOntologyFormat,
   { "BadGeneOntologyFormat",
"A feature has incorrectly labeled fields in a Gene Ontology (GO) term specification." } },
   { eErr_SEQ_FEAT_InconsistentGeneOntologyTermAndId,
   { "InconsistentGeneOntologyTermAndId",
"The same GO term should apply to Gene Ontology (GO) term specifications with the same GO ID." } },
   { eErr_SEQ_FEAT_MultiplyAnnotatedGenes,
   { "MultiplyAnnotatedGenes",
"Two gene features with the same name are annotated at the same location." } },
   { eErr_SEQ_FEAT_ReplicatedGeneSequence,
   { "ReplicatedGeneSequence",
"Two gene features with the same name are annotated at different locations, but the underlying sequence is identical." } },
   { eErr_SEQ_FEAT_ShortIntron,
   { "ShortIntron",
"Introns should be longer than 10 nt." } },
   { eErr_SEQ_FEAT_GeneXrefStrandProblem,
   { "GeneXrefStrandProblem",
"This feature has a gene xref that points to a gene on the wrong strand." } },
   { eErr_SEQ_FEAT_CDSmRNAXrefLocationProblem,
   { "CDSmRNAXrefLocationProblem",
"The CDS is not contained within the cross-referenced mRNA" } },
   { eErr_SEQ_FEAT_LocusCollidesWithLocusTag,
   { "LocusCollidesWithLocusTag",
"A gene locus is identical with a gene locus_tag." } },
   { eErr_SEQ_FEAT_IdenticalGeneSymbolAndSynonym,
   { "IdenticalGeneSymbolAndSynonym",
"The gene synonym is the same as the locus of a different gene." } },
   { eErr_SEQ_FEAT_NeedsNote,
   { "NeedsNote",
"A misc_feature requires a note." } },
   { eErr_SEQ_FEAT_RptUnitRangeProblem,
   { "RptUnitRangeProblem",
"The value of the rpt_unit_range qualifier is not inside the parent feature location." } },
   { eErr_SEQ_FEAT_TooManyInferenceAccessions,
   { "TooManyInferenceAccessions",
"There are too many inference qualifier accessions to have their versions verified by network access." } },
   { eErr_SEQ_FEAT_SgmlPresentInText,
   { "SgmlPresentInText",
"SGML markup is embedded in text." } },
    { eErr_SEQ_FEAT_MissingLocation,
    { "MissingLocation",
"A feature must specify its location." } },
    { eErr_SEQ_FEAT_MultipleBioseqs,
    { "MultipleBioseqs",
"Feature location refers to multiple near non-part bioseqs." } },
    { eErr_SEQ_FEAT_DifferntIdTypesInSeqLoc,
    { "DifferntIdTypesInSeqLoc",
"All ids in a single seq-loc which refer to the same bioseq should be of the \
same id type" } },
   { eErr_SEQ_FEAT_IntervalBeginsOrEndsInGap,
   { "IntervalBeginsOrEndsInGap",
"An internal interval of the feature starts or stops within a sequence gap." } },
   { eErr_SEQ_FEAT_InconsistentRRNAstrands,
   { "InconsistentRRNAstrands",
"rRNA and ITS features are not on the same strand." } },
   { eErr_SEQ_FEAT_CDSonMinusStrandMRNA,
   { "CDSonMinusStrandMRNA",
"Coding regions should be on the plus strand of mRNA molecules." } },
   { eErr_SEQ_FEAT_tRNAmRNAmixup,
   { "tRNAmRNAmixup",
"An mRNA feature has annotation indicating that it is really a tRNA." } },
   { eErr_SEQ_FEAT_ProductLength,
   { "ProductLength",
"The protein sequence that was supplied is not the same length as the translation of the coding region." } },
   { eErr_SEQ_FEAT_InconsistentPseudogeneCounts,
   { "InconsistentPseudogeneCounts",
"There are pseudo features with and without pseudogene qualifiers." } },
   { eErr_SEQ_FEAT_DeletedEcNumber,
   { "DeletedEcNumber",
"The EC_number has been deleted." } },
   { eErr_SEQ_FEAT_ReplacedEcNumber,
   { "ReplacedEcNumber",
"The EC_number has been replaced." } },
   { eErr_SEQ_FEAT_SplitEcNumber,
   { "SplitEcNumber",
"The EC_number has been split." } },
   { eErr_SEQ_FEAT_PeptideFeatureLacksCDS,
   { "PeptideFeatureLacksCDS",
"The peptide feature cannot be assigned to a CDS parent, and thus cannot be mapped to the protein product." } },

/* SEQ_ALIGN */

   { eErr_SEQ_ALIGN_SeqIdProblem,
   { "SeqIdProblem",
"The seqence referenced by an alignment SeqID is not packaged in the record." } },
   { eErr_SEQ_ALIGN_StrandRev,
   { "StrandRev",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_DensegLenStart,
   { "DensegLenStart",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_StartLessthanZero,
   { "StartLessthanZero",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_StartMorethanBiolen,
   { "StartMorethanBiolen",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_EndLessthanZero,
   { "EndLessthanZero",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_EndMorethanBiolen,
   { "EndMorethanBiolen",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_LenLessthanZero,
   { "LenLessthanZero",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_LenMorethanBiolen,
   { "LenMorethanBiolen",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_SumLenStart,
   { "SumLenStart",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_AlignDimSeqIdNotMatch,
   { "AlignDimSeqIdNotMatch",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_SegsDimSeqIdNotMatch,
   { "SegsDimSeqIdNotMatch",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_FastaLike,
   { "FastaLike",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_NullSegs,
   { "NullSegs",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_SegmentGap,
   { "SegmentGap",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_SegsDimOne,
   { "SegsDimOne",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_AlignDimOne,
   { "AlignDimOne",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_Segtype,
   { "Segtype",
"Please contact the sequence database for further help with this error." } },
   { eErr_SEQ_ALIGN_BlastAligns,
   { "BlastAligns",
"BLAST alignments are not desired in records submitted to the sequence database." } },
   { eErr_SEQ_ALIGN_PercentIdentity,
   { "PercentIdentity",
"An acceptable percent identity score is 75 percent or higher." } },
   { eErr_SEQ_ALIGN_ShortAln,
   { "ShortAln",
"Alignment is shorter than expected." } },
   { eErr_SEQ_ALIGN_UnexpectedAlignmentType ,
   { "UnexpectedAlignmentType",
"Only DenseSeg alignments are expected." } },

    { eErr_SEQ_ALIGN_SegsDimMismatch,
    { "SegsDimMismatch",
"Please contact the sequence database for further help with this error." } },
    { eErr_SEQ_ALIGN_SegsNumsegMismatch,
    { "SegsNumsegMismatch",
"Please contact the sequence database for further help with this error." } },
    { eErr_SEQ_ALIGN_SegsStartsMismatch,
    { "SegsStartsMismatch",
"Please contact the sequence database for further help with this error." } },
    { eErr_SEQ_ALIGN_SegsPresentMismatch,
    { "SegsPresentMismatch",
"Please contact the sequence database for further help with this error." } },
    { eErr_SEQ_ALIGN_SegsPresentStartsMismatch,
    { "SegsPresentStartsMismatch",
"Please contact the sequence database for further help with this error." } },
    { eErr_SEQ_ALIGN_SegsPresentStrandsMismatch,
    { "SegsPresentStrandsMismatch",
"Please contact the sequence database for further help with this error." } },


/* SEQ_GRAPH */

   { eErr_SEQ_GRAPH_GraphMin,
   { "GraphMin",
"The graph minimum value is outside of the 0-100 range." } },
   { eErr_SEQ_GRAPH_GraphMax,
   { "GraphMax",
"The graph maximum value is outside of the 0-100 range." } },
   { eErr_SEQ_GRAPH_GraphBelow,
   { "GraphBelow",
"Some quality scores are below the stated graph minimum value." } },
   { eErr_SEQ_GRAPH_GraphAbove,
   { "GraphAbove",
"Some quality scores are above the stated graph maximum value." } },
   { eErr_SEQ_GRAPH_GraphByteLen,
   { "GraphByteLen",
"The number of bytes in the quality graph does not correspond to the \
stated length of the graph." } },
   { eErr_SEQ_GRAPH_GraphOutOfOrder,
   { "GraphOutOfOrder",
"The quality graphs are not packaged in order - may be due to an old fa2htgs bug." } },
   { eErr_SEQ_GRAPH_GraphBioseqLen,
   { "GraphBioseqLen",
"The length of the quality graph does not correspond to the length of the Bioseq." } },
   { eErr_SEQ_GRAPH_GraphSeqLitLen,
   { "GraphSeqLitLen",
"The length of the quality graph does not correspond to the length of the \
delta Bioseq literal component." } },
   { eErr_SEQ_GRAPH_GraphSeqLocLen,
   { "GraphSeqLocLen",
"The length of the quality graph does not correspond to the length of the \
delta Bioseq location component." } },
   { eErr_SEQ_GRAPH_GraphStartPhase,
   { "GraphStartPhase",
"The quality graph does not start or stop on a sequence segment boundary." } },
   { eErr_SEQ_GRAPH_GraphStopPhase,
   { "GraphStopPhase",
"The quality graph does not start or stop on a sequence segment boundary." } },
   { eErr_SEQ_GRAPH_GraphDiffNumber,
   { "GraphDiffNumber",
"The number quality graph does not equal the number of sequence segments." } },
   { eErr_SEQ_GRAPH_GraphACGTScore,
   { "GraphACGTScore",
"Quality score values for known bases should be above 0." } },
   { eErr_SEQ_GRAPH_GraphNScore,
   { "GraphNScore",
"Quality score values for unknown bases should not be above 0." } },
   { eErr_SEQ_GRAPH_GraphGapScore,
   { "GraphGapScore",
"Gap positions should not have quality scores above 0." } },
   { eErr_SEQ_GRAPH_GraphOverlap,
   { "GraphOverlap",
"Quality graphs overlap - may be due to an old fa2htgs bug." } },
   { eErr_SEQ_GRAPH_GraphBioseqId,
   { "GraphBioseqId",
"Quality graph does not map to Bioseq in record." } },
   { eErr_SEQ_GRAPH_GraphACGTScoreMany,
   { "GraphACGTScoreMany",
"Quality score values for known bases should be above 0." } },
   { eErr_SEQ_GRAPH_GraphNScoreMany,
   { "GraphNScoreMany",
"Quality score values for unknown bases should not be above 0." } },
   { eErr_SEQ_GRAPH_GraphLocInvalid,
   { "GraphLocInvalid",
"Location for quality score values extends beyond end of sequence." } },


/* SEQ_ANNOT */

    { eErr_SEQ_ANNOT_AnnotIDs,
    { "AnnotIDs",
"Seq-annot.data.ids should only be used for communication between programs." } },
    { eErr_SEQ_ANNOT_AnnotLOCs,
    { "AnnotLOCs",
"Seq-annot.data.locs should only be used for communication between programs." } },

/* INTERNAL */

    { eErr_INTERNAL_Exception,
    { "Exception",
"Exception was caught while performing validation. Vaidation terminated." } }
};

typedef CStaticArrayMap<unsigned int, pair<string, string> > TErrTypeStrsMap;
DEFINE_STATIC_ARRAY_MAP_WITH_COPY(TErrTypeStrsMap, sc_ErrStrsMap, sc_ErrStrs);

#undef BEGIN
#undef END


CValidErrItem::CValidErrItem
(EDiagSev             sev,
 unsigned int         ec,
 const string&        msg,
 const string&        desc,
 const CSerialObject& obj,
 const string&        acc,
 const int            ver,
 const int            seq_offset)
  : m_Object(&obj)
{
    SetSev(sev);
    SetErrIndex(ec);
    SetMsg(msg);
    SetObjDesc(desc);
    SetAccession(acc);
    SetSeqOffset(seq_offset);
    if (ver > 0) {
        SetAccnver(acc + "." + NStr::IntToString(ver));
    } else {
        SetAccnver(acc);
    }
    SetVersion(ver);
    SetErrorName(ConvertErrCode(ec));
    SetErrorGroup(ConvertErrGroup(ec));
}

CValidErrItem::CValidErrItem
(EDiagSev             sev,
 unsigned int         ec,
 const string&        msg,
 const string&        desc,
 const CSerialObject& obj,
 const string&        acc,
 const int            ver,
 const string&        feature_id,
 const int            seq_offset)
  : m_Object(&obj)
{
    SetSev(sev);
    SetErrIndex(ec);
    SetMsg(msg);
    SetObjDesc(desc);
    SetAccession(acc);
    SetFeatureId(feature_id);
    SetSeqOffset(seq_offset);
    if (ver > 0) {
        SetAccnver(acc + "." + NStr::IntToString(ver));
    } else {
        SetAccnver(acc);
    }
    SetVersion(ver);
    SetErrorName(ConvertErrCode(ec));
    SetErrorGroup(ConvertErrGroup(ec));
}

CValidErrItem::CValidErrItem
(EDiagSev             sev,
 unsigned int         ec,
 const string&        msg,
 const string&        desc,
 const CSerialObject& obj,
 const CSeq_entry&    ctx,
 const string&        acc,
 const int            ver,
 const int            seq_offset)
  : m_Object(&obj),
    m_Ctx(&ctx)
{
    SetSev(sev);
    SetErrIndex(ec);
    SetMsg(msg);
    SetObjDesc(desc);
    SetAccession(acc);
    SetSeqOffset(seq_offset);
    if (ver > 0) {
        SetAccnver(acc + "." + NStr::IntToString(ver));
    } else {
        SetAccnver(acc);
    }
    SetVersion(ver);
    SetErrorName(ConvertErrCode(ec));
    SetErrorGroup(ConvertErrGroup(ec));
}


// destructor
CValidErrItem::~CValidErrItem(void)
{
}


const string CValidErrItem::GetErrCode(void) const
{
    return ConvertErrCode(GetErrIndex());
}


unsigned int CValidErrItem::GetErrCount(void)
{
    return sc_ErrStrsMap.size();
}


const string CValidErrItem::ConvertErrGroup(unsigned int err_int)
{
    static const char* kSeqInst  = "SEQ_INST";
    static const char* kSeqDescr = "SEQ_DESCR";
    static const char* kGeneric  = "GENERIC";
    static const char* kSeqPkg   = "SEQ_PKG";
    static const char* kSeqFeat  = "SEQ_FEAT";
    static const char* kSeqAlign = "SEQ_ALIGN";
    static const char* kSeqGraph = "SEQ_GRAPH";
    static const char* kSeqAnnot = "SEQ_ANNOT";
    static const char* kInternal = "INTERNAL";
    static const char* kUnknown   = "UNKNOWN";

    TErrIndex errIndex = static_cast<TErrIndex> (err_int);
    
#define IS_IN(x) (errIndex > ERR_CODE_BEGIN(x))  &&  (errIndex < ERR_CODE_END(x))

    if ((errIndex < eErr_MAX)  &&  (errIndex > 0)) {
        if ( IS_IN(SEQ_INST) ) {
            return kSeqInst;
        } else if ( IS_IN(SEQ_DESCR) ) {
            return kSeqDescr;
        } else if ( IS_IN(GENERIC) ) {
            return kGeneric;
        } else if ( IS_IN(SEQ_PKG) ) {
            return kSeqPkg;
        } else if ( IS_IN(SEQ_FEAT) ) {
            return kSeqFeat;
        } else if ( IS_IN(SEQ_ALIGN) ) {
            return kSeqAlign;
        } else if ( IS_IN(SEQ_GRAPH) ) {
            return kSeqGraph;
        } else if ( IS_IN(SEQ_ANNOT) ) {
            return kSeqAnnot;
        } else if ( IS_IN(INTERNAL) ) {
            return kInternal;
        }
    }

#undef IS_IN

    return kUnknown;
}

const string CValidErrItem::GetErrGroup(void) const
{
    return ConvertErrGroup(GetErrIndex());
}


const string CValidErrItem::GetVerbose(void) const
{
    TErrIndex err = GetErrIndex();
    if (err <= eErr_MAX) {
        TErrTypeStrsMap::const_iterator err_it = sc_ErrStrsMap.find(err);
        if (err_it != sc_ErrStrsMap.end()) {
            return err_it->second.second;
        }
    }
    return sc_ErrStrsMap.find(eErr_UNKNOWN)->second.second ;
}


const CSerialObject& CValidErrItem::GetObject(void) const
{
    return *m_Object;
}


bool CValidErrItem::IsSetObject(void) const 
{
    return m_Object.NotEmpty(); 
}


const string CValidErrItem::ConvertSeverity(EDiagSev sev)
{
    static const char* str_sev[] = {
        "Info", "Warning", "Error", "Critical", "Fatal", "Trace"
    };

    return str_sev[sev];
}


const string CValidErrItem::ConvertErrCode(unsigned int err_int)
{
    TErrIndex err = static_cast<TErrIndex> (err_int);
    if (err <= eErr_MAX) {
        TErrTypeStrsMap::const_iterator err_it = sc_ErrStrsMap.find(err);
        if (err_it != sc_ErrStrsMap.end()) {
            return err_it->second.first;
        }
    }
    return sc_ErrStrsMap.find(eErr_UNKNOWN)->second.first;
}


END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

/* Original file checksum: lines: 64, chars: 1875, CRC32: 4cb3d7e3 */
