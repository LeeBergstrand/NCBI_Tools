/* $Id: soap_envelope_.cpp 376551 2012-10-02 13:51:48Z gouriano $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'soap_11.xsd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <serial/soap/soap_envelope.hpp>
#include <serial/soap/soap_body.hpp>
#include <serial/soap/soap_header.hpp>

BEGIN_NCBI_SCOPE
// generated classes

void CSoapEnvelope_Base::ResetHeader(void)
{
    m_Header.Reset();
}

void CSoapEnvelope_Base::SetHeader(CSoapEnvelope_Base::THeader& value)
{
    m_Header.Reset(&value);
}

CSoapEnvelope_Base::THeader& CSoapEnvelope_Base::SetHeader(void)
{
    if ( !m_Header )
        m_Header.Reset(new CSoapHeader());
    return (*m_Header);
}

void CSoapEnvelope_Base::ResetBody(void)
{
    if ( !m_Body ) {
        m_Body.Reset(new TBody());
        return;
    }
    (*m_Body).Reset();
}

void CSoapEnvelope_Base::SetBody(CSoapEnvelope_Base::TBody& value)
{
    m_Body.Reset(&value);
}

void CSoapEnvelope_Base::ResetAnyContent(void)
{
    m_AnyContent.clear();
    m_set_State[0] &= ~0x30;
}

void CSoapEnvelope_Base::Reset(void)
{
    ResetHeader();
    ResetBody();
    ResetAnyContent();
}

BEGIN_NAMED_BASE_CLASS_INFO("Envelope", CSoapEnvelope)
{
    SET_CLASS_MODULE("soap_11");
    SET_NAMESPACE("http://schemas.xmlsoap.org/soap/envelope/")->SetNsQualified(false)->SetNamespacePrefix("env");
    ADD_NAMED_REF_MEMBER("Header", m_Header, CSoapHeader)->SetOptional()->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("Body", m_Body, CSoapBody)->SetNoPrefix();
    ADD_NAMED_MEMBER("AnyContent", m_AnyContent, STL_list, (STL_CRef, (STD, (ncbi::CAnyContentObject))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix()->SetNotag();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CSoapEnvelope_Base::CSoapEnvelope_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetBody();
    }
}

// destructor
CSoapEnvelope_Base::~CSoapEnvelope_Base(void)
{
}

END_NCBI_SCOPE


