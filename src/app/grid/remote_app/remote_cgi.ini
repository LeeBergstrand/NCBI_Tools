[remote_cgi]
app_path="./q.cgi"

idle_app_cmd="./netschedule_control -s localhost 9300"

; hard limit for application to run in seconds Default 0 means unlimited
; If job runs for more than that, remote_app kills it
; This parameter protects from application hang ups (infinite loop)
;
max_app_run_time=0

; time in seconds to send notification message to the queue server, that
; job is still running. This parameter protects from hardware failures,
; so if worker node crashes the job is rescheduled by the queue
;keep_alive_period=5

; Specifies an action if the application returns none zero code. 
; Available actions: done - the job will be marked as done
;                    fail - the job will be marked as failed with retcode error message
;                    return - the job will be returned back to the queue
; Default is done 
;non_zero_exit_action = fail

; Specifies if the remote application should be run from a separate directory
; for each job. In this case before the application is started a new directory
; with the name <QUEUE_NAME>_<JOB_KEY>_<TIMESTAMP> is created and when 
; the application finishes this directory gets automatically deleted if 
; 'remove_tmp_dir' (see below) parameter is set to true
; Default is false.
;run_in_separate_dir=true

; if 'run_in_separate_dir' is set to true, specifies a directory where 
; jobs' subdirectories are created.
; tmp_dir=/tmp
; Synonym for tmp_dir. if both are set tmp_dir is used.
; This parameter allows the following substitutions:
;   * %q - NetSchedule queue name
;   * %j - the ID of the job being processed
;   * %t - the current UNIX Epoch time in seconds
;   * %r - the current request number
;   * %% - substituted with a single '%' character
; If none of the substitutions is given, the following default
; combination is used: {tmp_path_parameter}/%q_%j_%t
;tmp_path=/tmp

; if 'run_in_separate_dir is set to true, specifies if a job's temporary directory
; should be deleted after job has finished.
; Default is true.
;remove_tmp_dir = false

; if 'run_in_separate_dir' is set to true, specifies if the job's stdout and stderr
; should be cached in the job's wording directory
; Default is true.
;cache_std_out_err = false

; Specifies a job's execution monitor application. This application can be used 
; to gather a progress report or to check if the job application is really doing 
; some task  or it hung up for some reasons. 
; It runs periodically during a real application execution. 
; Parameters which are passed to a monitor script:
;  -pid pid  - real application process id
;  -jid jid  - job id which the real application is processing.
;  -jwdir dir - the application's working directory
; Monitor's exit code interpretation:
;   0: the job is running OK. The monitor's stdout goes as a progress message 
;      to the client, and stderr goes to the log file if the logging is request 
;      for this node.
;   1: something wrong with the job and it should be returned back to the queue. 
;      The monitor's stderr goes to the log file unconditionally.
;   2: something wrong with the job and it should fail. The monitor's stdout goes
;      as a failure error message, and stderr goes to the log file unconditionally.
;   3: something wrong with the monitor application. The job continues executing. 
;      The monitor's stderr goes to the log file unconditionally.
;monitor_app_path=./monitor.sh

; Time in seconds. Specifies how long the monitor application is allowed to be running.
; if it does not finish during this time it is terminated.
; Default is 5.
;max_monitor_running_time = 3

; Time in seconds. Specifies how often the monitor application should run.
; Default is ever 5 sec.
;monitor_period = 10

; Wait time in seconds between first "soft" and second "hard"
; attempts to terminate the process. 
; Default value is 1 sec.
;kill_timeout = 5

; Environment variables handling:
; 1. take an environment coming from the real CGI
; 2. filter out all non-standard entries
; 3. filter out all variables from 'exclude' list
; 4. add all variables from 'include' list which are not standard entries
; 5. add or override all entries from [env_set] section
; 6. add but not override all entries from the local environment
[env_inherit]
;exclude=REQUEST_URI, SERVER_PORT, HTTP_ACCEPT_CHARSET
;include=SERVER_PORT

[env_set]
;LD_LIBRARY_PATH=.
;REMOTE_ADDR=1.1.1.1


; General purpose worker node parameters
[server]

; Maximum number of jobs(threads) can be served simultaneously.
; This parameter defines job parallelism. For computationally intensive
; algorithms this value should not be more than number of CPUs
; if set to 'auto', the node will determine the number of CPUs on the
; system and use this number.
; Default value is 'auto'
; max_threads=4

; initial number of threads created for incoming jobs
; Default number is 1.
; init_threads=1

; TCP/IP and UDP port number for control messages (like shutdown, version)
; and job notifications. It runs special control thread for incoming 
; administrative requests (from netschedule_control and netschedule_admin)
; Can take a ports range (ex. 9300-9310). In this case the system will try 
; to find an available port in the given range
control_port=9300

; Server side logging. A worker node can ask its context if this flag is 
; set to true
log=true

; Whether to log progress message changes created by the monitor
; application. The default value is false.
;log_progress=false

; Internal. 
; Delay in seconds node task dispatcher waits for free
; space in the job queue. Lower value usually gives better response
; to shutdown command (CPU traded off)
thread_pool_timeout=5

; Time worker node spends waiting for new jobs without connecting to
; the netschedule server queue. Server sends UDP requests to wake the 
; node up. Bigger values of this parameter reduces the netschedule server
; load in expense of job delivery latency (because of 
; potential loss of UDP packages)
;
job_wait_timeout=10

; The max total number of jobs after which the node will shutdown itself.
; Restarting the node periodically is useful due to accumulating heap 
; fragmentation possible leaks etc.
; default is 0 - means unlimited number of jobs.
; max_total_jobs = 100 

; The max number of failed jobs after which the node will shutdown itself.
; default is 0 - means unlimited number of failed jobs.
; max_failed_jobs = 3

; When true, server transforms into a daemon, detached from the 
; current program group (for UNIX only)
;daemon=true

; The list of worker nodes which this node will check before attempting 
; to retrieve a job from the NetSchedule queue. If at least one of these 
; worker nodes has an ideal thread, this node will not connect to the queue
; for a job. This node and all nodes from the given list must be connected 
; to the same NetSchedule service, the same queue and must run the same job. 
; If the list is empty (default) then this node is a master.
;master_nodes = service3:9300, service2:9300

; List of network hosts which are allowed admin access to the worker node
; if this worker node is controlled by grid_node_watcher.sh don't forget to
; to add "localhost" to this list. By default any host is allowed.
;admin_hosts = localhost service1 service2 service3

; Time delay (in seconds) between the node enters an idle mode (all jobs are done
; and there are no new jobs in the queue) and the idle task gets executed.
; Can not be less then 1 sec. Default value is 30 sec.
;idle_run_delay = 300

; Specifies if an idle task works in an exclusive mode, which means that 
; no real job will be processed until the idle task is running. 
; Default value is true.
;idle_exclusive = true

; The node will automatically shut itself down if it is idle for 
; a continuous period of time longer than this (in seconds):
; Default: 0 - means never auto shutdown
;auto_shutdown_if_idle = 20

; Specifies that the worker node must immediately exit as soon as
; it receives a shutdown request, without waiting for the worker
; threads to finish their running jobs.
;force_exit = false

; Specifies if the framework should reuse an instance of the job class.
; Setting this parameter to true means that only one instance of the job class
; will be create per each execution thread. False means that an instance of job
; class will be created per each incoming job.
; Default value is false.
reuse_job_object = true


; Time in seconds. Specifies how often the node should check states of jobs 
; it is processing. It is used as a feedback from the client to see if it wants  
; to cancel the job execution
check_status_period = 4


; NetSchedule client configuration
; 
[netschedule_api]

client_name=node_sample

; Specifies NetSchedule service. Format lb_service_name of host:port
service=NS_test
; Name of the queue (DO NOT use default queue for your application)
queue_name=test

; Time interval in seconds when client is automatically rebalanced
rebalance_time=10
; Number of requests before rebalancing
rebalance_requests=100

; Instructs the worker node to try to fit its output onto the netschedule's 
; internal storage (its size is about 512KB). If the data does not fit there
; it will be saved into an external blob storage (NetCache).
; Default value is false
use_embedded_storage = true

; Use affinity information when requesting jobs.
use_affinities = false

; Use affinity information and accept new affinities automatically.
claim_new_affinities = false

; Sets a communication timeout (in seconds) between a client and a server
; Default is 12 secs
;communication_timeout = 20

; Sets a communication timeout (in seconds) for accessing the first server
; in a service while submitting a job. If the first server does not reply
; within the specified amount of time, the next server will be tried, but
; the second and all subsequent servers will be given the full
; communication_timeout to reply. If LBSM services are not used or there's
; only one server in the service, this parameter does not apply.
; Default is 300ms (0.3s)
;first_server_timeout = 1


; Network storage (NetCache) configuration
;
[netcache_api]

; LB service name
service=NC_test

client_name = node_sample

; If this parameter is set to true then before the job is processed the input data blob 
; will be stored into a file on the local file system and the job will get a stream to 
; that file. 
; Default is false
cache_input = false

; If this parameter is set to true then the job will get a stream to file on the local 
; file system as an output stream. After job is done the content of this file will be
; stored to a blob in the storage.
; Default is false
cache_output = false 

; If 'cache_input' or 'cache_output' are set to true, sets a temporary directory where 
; cached input/output is stored.
; Default: .
; tmp_dir=/tmp
; Synonym for tmp_dir. if both are set tmp_dir is used.
; tmp_path=/tmp


; Time interval in seconds when client is automatically rebalanced
rebalance_time=10
; Number of requests before rebalancing
rebalance_requests=100

; Sets a communication timeout (in seconds) between a client and a server
; Default is 12 secs
;communication_timeout = 20

; Sets a communication timeout (in seconds) for accessing the first server
; in a service while creating a blob or performing any other operation with
; a mirrored blob. If the first server does not reply within the specified
; amount of time, the next server will be tried, but the second and all
; subsequent servers will be given the full communication_timeout to reply.
; If LBSM services are not used or there's only one server in the service,
; this parameter does not apply.
; Default is 300ms (0.3s)
;first_server_timeout = 1


; Sets a communication protocol type. Supported protocols are 'simple' and
; 'persistent'.
; The 'simple' protocol establishes a new connection to the NetCache server
; for each request.
; The 'persistent' protocol supports a permanent connection to the server
; (requires NetCache server version 2.5.9 and above)
; Default protocol is 'persistent'
;protocol = simple


; Throttling parameters. Described here for NetCache, but the same
; set of parameters can be defined in the [netschedule_api] section.

; If that many attempts to connect to a server occurs in a row,
; then requests to the server will be throttled.
; Setting this parameter to zero disables this throttling criterion. 
;  Default = 0
;
;throttle_by_subsequent_connection_failures = 3


; If at least "5" of the last "20" attempts to connect to a server did not
; succeed, then requests to the server will be throttled.
; Setting any of the parameters to zero disables this throttling criterion.
;  Default = 0/0
;
;throttle_by_connection_error_rate = 5/20


; Seconds to wait before the server can be accessed again (after requests to it
; have been throttled).
; Setting this parameter to zero or negative value will disable the throttling
; algorithm (and, all other "throttle_*" parameters will be ignored).
;  Default = 0
;
;throttle_relaxation_period = 12


; If connecting to a server (with all retries and delays) takes more than the
; specified amount of time, the connection will be failed.
; Setting this parameter to zero or negative value removes the restriction.
;  Default = 0.0
;
;max_connection_time = 23.4


; If the NC server pool is load-balanced, then do not unthrottle server
; unless (and until) it is present in the LBSM service table.
;  Default = false
;
;throttle_hold_until_active_in_lb = true
