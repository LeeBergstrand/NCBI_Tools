[cgi2rcgi]

; Content type generated by this CGI (text/html by default)
;content_type = application/json

; Page title
cgi_title = Remote CGI Status Checker

; Main HTML template file
;html_template = cgi2rcgi.html

; A list of comma separated files with html views
;html_template_includes = cgi2rcgi.inc.html

; Specifies the URL where the browser will be redirected if 
; a job has failed or been canceled. 
;fall_back_url = http://..

; Delay in sec before a browser will be redirected to an error fall_back_url
; if a job has failed
; -1 (default) means don't go to the error fall_back_url automaticaly.
;error_fall_back_delay = -1

; Delay in sec before a browser will be redirected to an error fall_bakc_url
; if a job has been canceled
; -1 (default) means don't go to the error fall_back_url automaticaly.
;cancel_fall_back_delay = -1

;donot_parse_content = true

; The name of the CGI entry that will be used as an
; affinity token when submitting a job.
;affinity_name = affinity
; Which CGI request method(s) to be used when searching for this entry.
; Default value is GET.
;affinity_source = GET, POST
; Narrow down the set of possible affinity values to the specified
; fixed number of unsigned integers. Affinity mapping works as follows:
; new_affinity = to_string(crc32(affinity) % narrow_affinity_set_to)
;narrow_affinity_set_to = 1000

; Date Format
;   String of letters describing the time format. The letters having
;   the following meanings:
;   - Y = year with century
;   - y = year without century           (00-99)
;   - M = month as decimal number        (01-12)
;   - B = full month name                (January-December)  
;   - b = abbeviated month name          (Jan-Dec)
;   - D = day as decimal number          (01-31)
;   - h = hour in 24-hour format         (00-23)
;   - H = hour in 12-hour format         (00-12)
;   - m = minute as decimal number       (00-59)
;   - s = second as decimal number       (00-59)
;   - l = milliseconds as decimal number (000-999)
;   - r = microseconds as decimal number (000000-999999)
;   - S = nanosecond as decimal number   (000000000-999999999)
;   - P = am/pm                          (AM/PM) 
;   - p = am/pm                          (am/pm) 
;   - Z = timezone format                (GMT or none) 
;   - W = full day of week name          (Sunday-Saturday)
;   - w = abbreviated day of week name   (Sun-Sat)
;date_format = D B Y, h:m:s

; Elapsed Time Format
;   String of letters describing the time span format.
;   The letters having the following meanings:
;   - - = add minus for negative time spans
;   - d = days
;   - h = hours (-23 - 23)
;   - H = total number of hour
;   - m = minutes (-59 - 59)
;   - M = total number of minutes
;   - s = seconds (-59 - 59)
;   - S = total number of seconds
;   - n = nanosecond (-999999999 - 999999999)
;   - N = total number of nanoseconds
;elapsed_time_format = S


;
; Grid CGI framework configuration 
;
[grid_cgi]

; Dalay in sec before the cgi refreshes itself
; Defalut value is 5 seconds
refresh_delay = 5

; Specifies hom long wait for a job completion before entering a 
; self refeshe cycle. If the job is done during this time its result will
; be sent immediatle to the client. 
; Default value is 5 seconds. This value can not exceed 20 seconds.
;expect_complete = 5

; if a job has succeeded its input data will be removed automatically
; (only it this data is stored in NetCache)
; Default value is true
;automatic_cleanup = true

; Specifies if a progress message will be used.
; Defalut values is true
;use_progress = true


;
;  NetSchedule client configuration
;

[netschedule_api]

; use LB (load balanced service) or pre-defined server (non LB configuration)
client_name = node_sample

; Name of the queue.  DO NOT use default queue for your application!
queue_name = sample

; Instructs the worker noded to try to fit its output onto the netschedule's 
; internal storage (its size is about 256Kb). If the data does not fit there
; it will be saved into an external blob storage (netcahe).
; Default value is false
use_embedded_storage = true

; LB service name
service = NS_test

; Time interval in seconds when client is automatically rebalanced
rebalance_time = 10

; Number of requests before rebalancing
rebalance_requests = 100


;
;  Network storage (NetCache) configuration
;
[netcache_client]

client_name = node_sample

; LB service name
service = NC_test

; Time interval in seconds when client is automatically rebalanced
rebalance_time = 10

; Number of requests before rebalancing
rebalance_requests = 100

; I/O volume based rebalancing
rebalance_bytes = 5000000


