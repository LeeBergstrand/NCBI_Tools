# ===========================================================================
#
#                            PUBLIC DOMAIN NOTICE
#               National Center for Biotechnology Information
#
#  This software/database is a "United States Government Work" under the
#  terms of the United States Copyright Act.  It was written as part of
#  the author's official duties as a United States Government employee and
#  thus cannot be copyrighted.  This software/database is freely available
#  to the public for use. The National Library of Medicine and the U.S.
#  Government have not placed any restriction on its use or reproduction.
#
#  Although all reasonable efforts have been taken to ensure the accuracy
#  and reliability of the software and data, the NLM and the U.S.
#  Government do not and cannot warrant the performance or results that
#  may be obtained by using this software or data. The NLM and the U.S.
#  Government disclaim all warranties, express or implied, including
#  warranties of performance, merchantability or fitness for any particular
#  purpose.
#
#  Please cite the author in any work or product based on this material.
#
# ===========================================================================


default: std

TOP ?= $(abspath ../..)
MODULE = tools/bam-loader

INT_TOOLS = \

EXT_TOOLS = \
	bam-load \
	bam-load.3

TEST_TOOLS = \
	wb-test-bam-loader    
	
ALL_TOOLS = \
	$(INT_TOOLS) \
	$(EXT_TOOLS)

RUNTESTS_OVERRIDE=1

include $(TOP)/build/Makefile.env

#-------------------------------------------------------------------------------
# outer targets
#
ifeq (win,$(OS))
all std:
	@ echo "not building bam-load under Windows"
else
all std: vers-includes
	@ $(MAKE_CMD) $(TARGDIR)/std
endif

$(ALL_TOOLS): vers-includes
	@ $(MAKE_CMD) $(BINDIR)/$@

$(TEST_TOOLS): makedirs
	@ $(MAKE_CMD) $(TEST_BINDIR)/$@

.PHONY: all std $(ALL_TOOLS) $(TEST_TOOLS)

#-------------------------------------------------------------------------------
# std
#
$(TARGDIR)/std: \
	$(addprefix $(BINDIR)/,$(ALL_TOOLS))

.PHONY: $(TARGDIR)/std

#-------------------------------------------------------------------------------
# vers-includes
#
$(TARGDIR)/vers-includes: $(addsuffix .vers.h,$(EXT_TOOLS))

.PHONY: $(TARGDIR)/vers-includes

#-------------------------------------------------------------------------------
# clean
#
clean: stdclean

.PHONY: clean

#-------------------------------------------------------------------------------
# tag
#
tag: \
	$(addsuffix _tag,$(ALL_TOOLS))

.PHONY: tag $(addsuffix _tag,$(ALL_TOOLS))


#-------------------------------------------------------------------------------
# bam-load.2.*
#
BAMLOAD_SRC = \
	bam-loader \
	alignment-writer \
	reference-writer \
	sequence-writer \
	loader-imp

BAMLOAD_OBJ = \
	$(addsuffix .$(OBJX),$(BAMLOAD_SRC))

BAMLOAD_LIB = \
	-lload \
	-lkapp \
	-lncbi-bam \
	-lalign-writer \
	-lwvdb \
	-lwkdb \
	-dwaxf \
	-dwsraxf \
	-dwvxf \
	-lksrch \
	-lvfs \
	-lkrypto \
	-lkfg \
	-lkfs \
	-lklib \
	-lkq \
	-lkproc \
	-lm \
	-lz

$(BINDIR)/bam-load: $(BAMLOAD_OBJ)
	$(LD) --exe --vers $(SRCDIR) -o $@ $^ $(BAMLOAD_LIB)

bam-load_tag:
	@ $(TOP)/build/tag-module.sh $(MODULE) bam-load $(BAMLOAD_OBJ)

#-------------------------------------------------------------------------------
# bam-load.3
#
BAMLOAD3_SRC = \
	bam-loader3 \
	bam-reader \
	loader-imp3

BAMLOAD3_OBJ = \
	$(addsuffix .$(OBJX),$(BAMLOAD3_SRC))

BAMLOAD3_LIB = \
	-lloader \
	-lload \
	-lkapp \
	-lncbi-bam \
	-lalign-writer \
	-lwvdb \
	-lwkdb \
	-dwaxf \
	-dwsraxf \
	-dwvxf \
	-lksrch \
	-lvfs \
	-lkrypto \
	-lkfg \
	-lkfs \
	-lklib \
	-lkq \
	-lkproc \
	-lm \
	-lz

$(BINDIR)/bam-load.3: $(BAMLOAD3_OBJ)
	$(LD) --exe --vers $(SRCDIR)/bam-load.3.vers -o $@ $^ $(BAMLOAD3_LIB)

#-------------------------------------------------------------------------------
# white-box test (v.3)
#
TEST_SRC = \
	  bam-reader \
	  wb-test-bam-loader

TEST_OBJ = \
	  $(addsuffix .$(OBJX),$(TEST_SRC))

TEST_LIB = \
	-sktst \
	$(BAMLOAD3_LIB)

$(TEST_BINDIR)/wb-test-bam-loader: $(TEST_OBJ)
	$(LP) --exe -o $@ $^ $(TEST_LIB) 

#-------------------------------------------------------------------------------
# runtests
#
ifeq (win,$(OS))
runtests:
	  @ true
else
WDIR=$(TOP)/test/bam-load
runtests: std $(TEST_TOOLS)
	@ export LD_LIBRARY_PATH=$(LIBDIR);cd $(WDIR);\
	for i in $(TEST_TOOLS);\
	do\
			  echo ++++++++++++++++++++++++++++++++++++++++++++++++++++++;\
			  echo Run $(TEST_BINDIR)/$$i;eval $(RUN_REMOTELY) $(TEST_BINDIR)/$$i;r=$$?; \
			  if [ "$$r" != "0" ] ; then exit $$r; fi; \
	  done

.PHONY: runtests
endif
