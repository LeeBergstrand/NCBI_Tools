<!-------------------------------------------------------------------------------------->
<! $Id: VTable.htm 14424 2013-02-13 19:43:18Z ucko $ >
<html xmlns="http://www.w3.org/1999/xhtml">
<head><title>derived classes and vtables</title></head>
<body>
 <h1>Derived classes and vtables: example of creation</h1>
 <h2>Task</h2>
 <p>We have a parent "class" with virtual functions <code>KNameList</code>
  and need to create a child class (<code>KNodeNameList</code>).</p>
 <h2>Parent class</h2>
 <p><code>KNameList</code> has the following virtual functions
  declared in <code>itf/kcont/namelist.h</code> (parent class public interface):</p>
  <ul>
   <li><code>int KNameListRelease ( const KNameList *self );</code></li>
   <li><code>int KNameListCount ( const KNameList *self, uint32_t *count );</code></li>
   <li><code>
    int KNameListGet ( const KNameList *self, uint32_t idx, const char **name );
   </code></li>
  </ul>
 <p>The file <code>itf/kcont/impl.h</code>
  contains "class protected" part to be used by derived classes.<br/>It has:
 </p>
 <ul>
  <li><code>struct KNameList</code> definition</li>
  <li><code>struct KNameList_vt_v1</code> i.e. <b>virtual table</b> definition</li>
  <li>"protected constructor":
   <code>int KNameListInit ( KNameList *self, const KNameList_vt *vt );</code>
  </li>
 </ul>
 <h2>Child class: factory method declaration (.h file)</h2>
 <p>To create child objects we declare a factory method:</p>
 <ul><li><code>
  int KXMLNodeListAttr ( const KXMLNode *self, struct KNameList const **result );</code>
 </li></ul>
 <p>It is a function of <code>KXMLNode</code> "class" that creates
  <code>KNameList</code> objects of our derived <code>KNodeNameList</code> type.
 </p>
 <h2>Child class implementation</h2>
 <p>Child class .c file contains:</p>
 <ul>
  <li>child class structure</li>
  <li>child class virtual functions</li>
  <li>virtual table "object"</li>
  <li><code>KXMLNodeListAttr()</code> definition</li>
 </ul>
 <p>All of these objects and functions are static within the file.</p>
 <ol>
  <h3><li>Child class structure</h3>
   <pre>struct KNodeNameList {
    KNameList dad;
    struct _xmlAttr* properties;
    struct _xmlNode* children;
};</pre>
  <h3><li>Child class virtual functions</h3>
   <pre>static int s_KNodeNameListRelease ( KNodeNameList *self )
{ return kxmlNoErr; }

static int s_KNodeNameListCount ( const KNodeNameList *self, uint32_t *count )
{ return kxmlNoErr; }

static int s_KNodeNameListGet
    ( const KNodeNameList *self, uint32_t idx, const char **name )
{ return kxmlNoErr; }</pre>
  <h3><li>Virtual table "object"</h3>
   <pre>static KNameList_vt_v1 s_vtKNodeNameList = {
    /* version 1.0 */
    1, 0,

    /* start minor version 0 methods */
    ( int ( * ) ( KNameList* ) ) s_KNodeNameListRelease,
    ( int ( * ) ( const KNameList*, uint32_t* ) ) s_KNodeNameListCount,
    ( int ( * ) ( const KNameList*, uint32_t, const char** ) ) s_KNodeNameListGet
    /* end minor version 0 methods */
};</pre>
  <h3><li>Factory method definition</h3>
   <pre>int KXMLNodeListAttr ( const KXMLNode *self, struct KNameList const **result ) {
    KNodeNameList* obj = (KNodeNameList*) malloc(sizeof(KNodeNameList));
    int status
	= KNameListInit(&obj->dad, (const KNameList_vt*) &s_vtKNodeNameList);
    *result = obj;
    return kxmlNoErr;
 } </pre>
 </ol></body></html>
